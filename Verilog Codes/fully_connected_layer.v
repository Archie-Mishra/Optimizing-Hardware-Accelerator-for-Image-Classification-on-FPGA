// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fully_connected_layer,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.169000,HLS_SYN_LAT=68291,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=1042,HLS_SYN_LUT=2128,HLS_VERSION=2019_1}" *)

module fully_connected_layer (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        axi_input_V_V_TDATA,
        axi_input_V_V_TVALID,
        axi_input_V_V_TREADY,
        axi_output_V_V_TDATA,
        axi_output_V_V_TVALID,
        axi_output_V_V_TREADY,
        weight_input_V_V_TDATA,
        weight_input_V_V_TVALID,
        weight_input_V_V_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_pp0_stage0 = 10'd64;
parameter    ap_ST_fsm_state10 = 10'd128;
parameter    ap_ST_fsm_pp1_stage0 = 10'd256;
parameter    ap_ST_fsm_state15 = 10'd512;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] axi_input_V_V_TDATA;
input   axi_input_V_V_TVALID;
output   axi_input_V_V_TREADY;
output  [7:0] axi_output_V_V_TDATA;
output   axi_output_V_V_TVALID;
input   axi_output_V_V_TREADY;
input  [63:0] weight_input_V_V_TDATA;
input   weight_input_V_V_TVALID;
output   weight_input_V_V_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] axi_input_V_V_0_data_out;
wire    axi_input_V_V_0_vld_in;
wire    axi_input_V_V_0_vld_out;
wire    axi_input_V_V_0_ack_in;
reg    axi_input_V_V_0_ack_out;
reg   [7:0] axi_input_V_V_0_payload_A;
reg   [7:0] axi_input_V_V_0_payload_B;
reg    axi_input_V_V_0_sel_rd;
reg    axi_input_V_V_0_sel_wr;
wire    axi_input_V_V_0_sel;
wire    axi_input_V_V_0_load_A;
wire    axi_input_V_V_0_load_B;
reg   [1:0] axi_input_V_V_0_state;
wire    axi_input_V_V_0_state_cmp_full;
reg   [7:0] axi_output_V_V_1_data_in;
reg   [7:0] axi_output_V_V_1_data_out;
reg    axi_output_V_V_1_vld_in;
wire    axi_output_V_V_1_vld_out;
wire    axi_output_V_V_1_ack_in;
wire    axi_output_V_V_1_ack_out;
reg   [7:0] axi_output_V_V_1_payload_A;
reg   [7:0] axi_output_V_V_1_payload_B;
reg    axi_output_V_V_1_sel_rd;
reg    axi_output_V_V_1_sel_wr;
wire    axi_output_V_V_1_sel;
wire    axi_output_V_V_1_load_A;
wire    axi_output_V_V_1_load_B;
reg   [1:0] axi_output_V_V_1_state;
wire    axi_output_V_V_1_state_cmp_full;
reg   [63:0] weight_input_V_V_0_data_out;
wire    weight_input_V_V_0_vld_in;
wire    weight_input_V_V_0_vld_out;
wire    weight_input_V_V_0_ack_in;
reg    weight_input_V_V_0_ack_out;
reg   [63:0] weight_input_V_V_0_payload_A;
reg   [63:0] weight_input_V_V_0_payload_B;
reg    weight_input_V_V_0_sel_rd;
reg    weight_input_V_V_0_sel_wr;
wire    weight_input_V_V_0_sel;
wire    weight_input_V_V_0_load_A;
wire    weight_input_V_V_0_load_B;
reg   [1:0] weight_input_V_V_0_state;
wire    weight_input_V_V_0_state_cmp_full;
wire   [0:0] interrupt_flag_V;
reg   [7:0] FILTER_WEIGHT_V_address0;
reg    FILTER_WEIGHT_V_ce0;
reg    FILTER_WEIGHT_V_we0;
wire   [255:0] FILTER_WEIGHT_V_q0;
reg   [7:0] LIMIT_V_address0;
reg    LIMIT_V_ce0;
reg    LIMIT_V_we0;
wire   [8:0] LIMIT_V_d0;
wire   [8:0] LIMIT_V_q0;
reg    axi_input_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln57_fu_1162_p2;
reg   [0:0] icmp_ln60_reg_2221;
reg    axi_output_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln895_reg_2588;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] icmp_ln895_reg_2588_pp1_iter2_reg;
reg    weight_input_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln22_fu_736_p2;
wire   [0:0] icmp_ln25_fu_752_p2;
wire    ap_CS_fsm_state5;
reg   [0:0] interrupt_flag_V_rea_reg_2159;
wire   [0:0] icmp_ln34_fu_796_p2;
reg   [8:0] store_31_V_0_reg_305;
reg   [8:0] store_30_V_0_reg_317;
reg   [8:0] store_29_V_0_reg_329;
reg   [8:0] store_28_V_0_reg_341;
reg   [8:0] store_27_V_0_reg_353;
reg   [8:0] store_26_V_0_reg_365;
reg   [8:0] store_25_V_0_reg_377;
reg   [8:0] store_24_V_0_reg_389;
reg   [8:0] store_23_V_0_reg_401;
reg   [8:0] store_22_V_0_reg_413;
reg   [8:0] store_21_V_0_reg_425;
reg   [8:0] store_20_V_0_reg_437;
reg   [8:0] store_19_V_0_reg_449;
reg   [8:0] store_18_V_0_reg_461;
reg   [8:0] store_17_V_0_reg_473;
reg   [8:0] store_16_V_0_reg_485;
reg   [8:0] store_15_V_0_reg_497;
reg   [8:0] store_14_V_0_reg_509;
reg   [8:0] store_13_V_0_reg_521;
reg   [8:0] store_12_V_0_reg_533;
reg   [8:0] store_11_V_0_reg_545;
reg   [8:0] store_10_V_0_reg_557;
reg   [8:0] store_9_V_0_reg_569;
reg   [8:0] store_8_V_0_reg_581;
reg   [8:0] store_7_V_0_reg_593;
reg   [8:0] store_6_V_0_reg_605;
reg   [8:0] store_5_V_0_reg_617;
reg   [8:0] store_4_V_0_reg_629;
reg   [8:0] store_3_V_0_reg_641;
reg   [8:0] store_2_V_0_reg_653;
reg   [8:0] store_1_V_0_reg_665;
reg   [8:0] store_0_V_0_reg_677;
reg   [8:0] u_0_reg_689;
reg   [5:0] w_0_reg_701;
wire   [0:0] interrupt_flag_V_rea_read_fu_168_p2;
wire   [8:0] i_fu_722_p2;
reg   [8:0] i_reg_2178;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln22_fu_732_p1;
reg   [31:0] zext_ln22_reg_2183;
reg    ap_predicate_op48_read_state3;
reg    ap_block_state3;
wire   [8:0] j_fu_742_p2;
reg   [8:0] j_reg_2191;
wire   [31:0] zext_ln24_fu_748_p1;
reg   [31:0] zext_ln24_reg_2196;
wire   [8:0] n_fu_802_p2;
reg    ap_predicate_op69_read_state5;
reg    ap_block_state5;
wire   [0:0] icmp_ln46_fu_818_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
wire   [3:0] t_fu_824_p2;
reg   [3:0] t_reg_2216;
wire   [0:0] icmp_ln60_fu_830_p2;
wire   [7:0] shl_ln_fu_840_p3;
reg   [7:0] shl_ln_reg_2225;
wire   [31:0] zext_ln67_1_fu_848_p1;
reg   [31:0] zext_ln67_1_reg_2230;
wire   [31:0] zext_ln67_2_fu_858_p1;
reg   [31:0] zext_ln67_2_reg_2235;
wire   [31:0] zext_ln67_3_fu_868_p1;
reg   [31:0] zext_ln67_3_reg_2240;
wire   [31:0] zext_ln67_4_fu_878_p1;
reg   [31:0] zext_ln67_4_reg_2245;
wire   [31:0] zext_ln67_5_fu_888_p1;
reg   [31:0] zext_ln67_5_reg_2250;
wire   [31:0] zext_ln67_6_fu_898_p1;
reg   [31:0] zext_ln67_6_reg_2255;
wire   [31:0] zext_ln67_7_fu_908_p1;
reg   [31:0] zext_ln67_7_reg_2260;
wire   [31:0] zext_ln67_8_fu_918_p1;
reg   [31:0] zext_ln67_8_reg_2265;
wire   [31:0] zext_ln67_9_fu_928_p1;
reg   [31:0] zext_ln67_9_reg_2270;
wire   [31:0] zext_ln67_10_fu_938_p1;
reg   [31:0] zext_ln67_10_reg_2275;
wire   [31:0] zext_ln67_11_fu_948_p1;
reg   [31:0] zext_ln67_11_reg_2280;
wire   [31:0] zext_ln67_12_fu_958_p1;
reg   [31:0] zext_ln67_12_reg_2285;
wire   [31:0] zext_ln67_13_fu_968_p1;
reg   [31:0] zext_ln67_13_reg_2290;
wire   [31:0] zext_ln67_14_fu_978_p1;
reg   [31:0] zext_ln67_14_reg_2295;
wire   [31:0] zext_ln67_15_fu_988_p1;
reg   [31:0] zext_ln67_15_reg_2300;
wire   [31:0] zext_ln67_16_fu_998_p1;
reg   [31:0] zext_ln67_16_reg_2305;
wire   [31:0] zext_ln67_17_fu_1008_p1;
reg   [31:0] zext_ln67_17_reg_2310;
wire   [31:0] zext_ln67_18_fu_1018_p1;
reg   [31:0] zext_ln67_18_reg_2315;
wire   [31:0] zext_ln67_19_fu_1028_p1;
reg   [31:0] zext_ln67_19_reg_2320;
wire   [31:0] zext_ln67_20_fu_1038_p1;
reg   [31:0] zext_ln67_20_reg_2325;
wire   [31:0] zext_ln67_21_fu_1048_p1;
reg   [31:0] zext_ln67_21_reg_2330;
wire   [31:0] zext_ln67_22_fu_1058_p1;
reg   [31:0] zext_ln67_22_reg_2335;
wire   [31:0] zext_ln67_23_fu_1068_p1;
reg   [31:0] zext_ln67_23_reg_2340;
wire   [31:0] zext_ln67_24_fu_1078_p1;
reg   [31:0] zext_ln67_24_reg_2345;
wire   [31:0] zext_ln67_25_fu_1088_p1;
reg   [31:0] zext_ln67_25_reg_2350;
wire   [31:0] zext_ln67_26_fu_1098_p1;
reg   [31:0] zext_ln67_26_reg_2355;
wire   [31:0] zext_ln67_27_fu_1108_p1;
reg   [31:0] zext_ln67_27_reg_2360;
wire   [31:0] zext_ln67_28_fu_1118_p1;
reg   [31:0] zext_ln67_28_reg_2365;
wire   [31:0] zext_ln67_29_fu_1128_p1;
reg   [31:0] zext_ln67_29_reg_2370;
wire   [31:0] zext_ln67_30_fu_1138_p1;
reg   [31:0] zext_ln67_30_reg_2375;
wire   [31:0] zext_ln67_31_fu_1148_p1;
reg   [31:0] zext_ln67_31_reg_2380;
wire   [31:0] zext_ln67_32_fu_1158_p1;
reg   [31:0] zext_ln67_32_reg_2385;
reg   [0:0] icmp_ln57_reg_2390;
reg    ap_predicate_op190_read_state7;
reg    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln57_reg_2390_pp0_iter1_reg;
wire   [8:0] u_fu_1168_p2;
reg   [8:0] u_reg_2394;
wire   [8:0] store_0_V_1_fu_1209_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [8:0] store_1_V_1_fu_1236_p3;
wire   [8:0] store_2_V_1_fu_1263_p3;
wire   [8:0] store_3_V_1_fu_1290_p3;
wire   [8:0] store_4_V_1_fu_1317_p3;
wire   [8:0] store_5_V_1_fu_1344_p3;
wire   [8:0] store_6_V_1_fu_1371_p3;
wire   [8:0] store_7_V_1_fu_1398_p3;
wire   [8:0] store_8_V_1_fu_1425_p3;
wire   [8:0] store_9_V_1_fu_1452_p3;
wire   [8:0] store_10_V_1_fu_1479_p3;
wire   [8:0] store_11_V_1_fu_1506_p3;
wire   [8:0] store_12_V_1_fu_1533_p3;
wire   [8:0] store_13_V_1_fu_1560_p3;
wire   [8:0] store_14_V_1_fu_1587_p3;
wire   [8:0] store_15_V_1_fu_1614_p3;
wire   [8:0] store_16_V_1_fu_1641_p3;
wire   [8:0] store_17_V_1_fu_1668_p3;
wire   [8:0] store_18_V_1_fu_1695_p3;
wire   [8:0] store_19_V_1_fu_1722_p3;
wire   [8:0] store_20_V_1_fu_1749_p3;
wire   [8:0] store_21_V_1_fu_1776_p3;
wire   [8:0] store_22_V_1_fu_1803_p3;
wire   [8:0] store_23_V_1_fu_1830_p3;
wire   [8:0] store_24_V_1_fu_1857_p3;
wire   [8:0] store_25_V_1_fu_1884_p3;
wire   [8:0] store_26_V_1_fu_1911_p3;
wire   [8:0] store_27_V_1_fu_1938_p3;
wire   [8:0] store_28_V_1_fu_1965_p3;
wire   [8:0] store_29_V_1_fu_1992_p3;
wire   [8:0] store_30_V_1_fu_2019_p3;
wire   [8:0] store_31_V_1_fu_2046_p3;
wire   [0:0] icmp_ln74_fu_2054_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_state13_pp1_stage0_iter2;
reg    ap_block_state13_io;
wire    ap_block_state14_pp1_stage0_iter3;
reg    ap_block_state14_io;
reg    ap_block_pp1_stage0_11001;
wire   [5:0] w_fu_2060_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [8:0] tmp_2_fu_2084_p34;
reg   [8:0] tmp_2_reg_2578;
wire   [0:0] icmp_ln895_fu_2154_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state10;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
wire   [7:0] input_data_V_address0;
reg    input_data_V_ce0;
reg    input_data_V_we0;
wire   [0:0] input_data_V_d0;
wire   [7:0] input_data_V_address1;
reg    input_data_V_ce1;
wire   [0:0] input_data_V_q1;
reg   [8:0] i_0_reg_260;
reg   [8:0] bvh_d_index_reg_272;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln20_fu_716_p2;
reg   [8:0] n_0_reg_283;
reg   [3:0] t_0_reg_294;
wire    ap_CS_fsm_state15;
reg   [8:0] ap_phi_mux_u_0_phi_fu_693_p4;
wire   [63:0] zext_ln31_fu_763_p1;
wire   [63:0] zext_ln36_fu_808_p1;
wire   [63:0] zext_ln61_fu_1174_p1;
wire   [63:0] zext_ln67_fu_1184_p1;
wire   [63:0] zext_ln77_fu_2075_p1;
reg   [255:0] p_Val2_s_fu_160;
reg   [255:0] p_Result_2_fu_782_p4;
reg   [63:0] p_Val2_1_fu_164;
wire    ap_block_pp1_stage0_01001;
wire   [5:0] j64_fu_728_p1;
wire   [0:0] p_Result_s_fu_771_p3;
wire   [63:0] p_Repl2_s_fu_778_p1;
wire   [2:0] trunc_ln67_fu_836_p1;
wire   [7:0] or_ln67_fu_852_p2;
wire   [7:0] or_ln67_1_fu_862_p2;
wire   [7:0] or_ln67_2_fu_872_p2;
wire   [7:0] or_ln67_3_fu_882_p2;
wire   [7:0] or_ln67_4_fu_892_p2;
wire   [7:0] or_ln67_5_fu_902_p2;
wire   [7:0] or_ln67_6_fu_912_p2;
wire   [7:0] or_ln67_7_fu_922_p2;
wire   [7:0] or_ln67_8_fu_932_p2;
wire   [7:0] or_ln67_9_fu_942_p2;
wire   [7:0] or_ln67_10_fu_952_p2;
wire   [7:0] or_ln67_11_fu_962_p2;
wire   [7:0] or_ln67_12_fu_972_p2;
wire   [7:0] or_ln67_13_fu_982_p2;
wire   [7:0] or_ln67_14_fu_992_p2;
wire   [7:0] or_ln67_15_fu_1002_p2;
wire   [7:0] or_ln67_16_fu_1012_p2;
wire   [7:0] or_ln67_17_fu_1022_p2;
wire   [7:0] or_ln67_18_fu_1032_p2;
wire   [7:0] or_ln67_19_fu_1042_p2;
wire   [7:0] or_ln67_20_fu_1052_p2;
wire   [7:0] or_ln67_21_fu_1062_p2;
wire   [7:0] or_ln67_22_fu_1072_p2;
wire   [7:0] or_ln67_23_fu_1082_p2;
wire   [7:0] or_ln67_24_fu_1092_p2;
wire   [7:0] or_ln67_25_fu_1102_p2;
wire   [7:0] or_ln67_26_fu_1112_p2;
wire   [7:0] or_ln67_27_fu_1122_p2;
wire   [7:0] or_ln67_28_fu_1132_p2;
wire   [7:0] or_ln67_29_fu_1142_p2;
wire   [7:0] or_ln67_30_fu_1152_p2;
wire   [0:0] p_Result_4_fu_1190_p3;
wire   [0:0] xor_ln879_fu_1197_p2;
wire   [8:0] store_0_V_fu_1203_p2;
wire   [0:0] p_Result_4_1_fu_1217_p3;
wire   [0:0] xor_ln879_1_fu_1224_p2;
wire   [8:0] store_1_V_fu_1230_p2;
wire   [0:0] p_Result_4_2_fu_1244_p3;
wire   [0:0] xor_ln879_2_fu_1251_p2;
wire   [8:0] store_2_V_fu_1257_p2;
wire   [0:0] p_Result_4_3_fu_1271_p3;
wire   [0:0] xor_ln879_3_fu_1278_p2;
wire   [8:0] store_3_V_fu_1284_p2;
wire   [0:0] p_Result_4_4_fu_1298_p3;
wire   [0:0] xor_ln879_4_fu_1305_p2;
wire   [8:0] store_4_V_fu_1311_p2;
wire   [0:0] p_Result_4_5_fu_1325_p3;
wire   [0:0] xor_ln879_5_fu_1332_p2;
wire   [8:0] store_5_V_fu_1338_p2;
wire   [0:0] p_Result_4_6_fu_1352_p3;
wire   [0:0] xor_ln879_6_fu_1359_p2;
wire   [8:0] store_6_V_fu_1365_p2;
wire   [0:0] p_Result_4_7_fu_1379_p3;
wire   [0:0] xor_ln879_7_fu_1386_p2;
wire   [8:0] store_7_V_fu_1392_p2;
wire   [0:0] p_Result_4_8_fu_1406_p3;
wire   [0:0] xor_ln879_8_fu_1413_p2;
wire   [8:0] store_8_V_fu_1419_p2;
wire   [0:0] p_Result_4_9_fu_1433_p3;
wire   [0:0] xor_ln879_9_fu_1440_p2;
wire   [8:0] store_9_V_fu_1446_p2;
wire   [0:0] p_Result_4_s_fu_1460_p3;
wire   [0:0] xor_ln879_10_fu_1467_p2;
wire   [8:0] store_10_V_fu_1473_p2;
wire   [0:0] p_Result_4_10_fu_1487_p3;
wire   [0:0] xor_ln879_11_fu_1494_p2;
wire   [8:0] store_11_V_fu_1500_p2;
wire   [0:0] p_Result_4_11_fu_1514_p3;
wire   [0:0] xor_ln879_12_fu_1521_p2;
wire   [8:0] store_12_V_fu_1527_p2;
wire   [0:0] p_Result_4_12_fu_1541_p3;
wire   [0:0] xor_ln879_13_fu_1548_p2;
wire   [8:0] store_13_V_fu_1554_p2;
wire   [0:0] p_Result_4_13_fu_1568_p3;
wire   [0:0] xor_ln879_14_fu_1575_p2;
wire   [8:0] store_14_V_fu_1581_p2;
wire   [0:0] p_Result_4_14_fu_1595_p3;
wire   [0:0] xor_ln879_15_fu_1602_p2;
wire   [8:0] store_15_V_fu_1608_p2;
wire   [0:0] p_Result_4_15_fu_1622_p3;
wire   [0:0] xor_ln879_16_fu_1629_p2;
wire   [8:0] store_16_V_fu_1635_p2;
wire   [0:0] p_Result_4_16_fu_1649_p3;
wire   [0:0] xor_ln879_17_fu_1656_p2;
wire   [8:0] store_17_V_fu_1662_p2;
wire   [0:0] p_Result_4_17_fu_1676_p3;
wire   [0:0] xor_ln879_18_fu_1683_p2;
wire   [8:0] store_18_V_fu_1689_p2;
wire   [0:0] p_Result_4_18_fu_1703_p3;
wire   [0:0] xor_ln879_19_fu_1710_p2;
wire   [8:0] store_19_V_fu_1716_p2;
wire   [0:0] p_Result_4_19_fu_1730_p3;
wire   [0:0] xor_ln879_20_fu_1737_p2;
wire   [8:0] store_20_V_fu_1743_p2;
wire   [0:0] p_Result_4_20_fu_1757_p3;
wire   [0:0] xor_ln879_21_fu_1764_p2;
wire   [8:0] store_21_V_fu_1770_p2;
wire   [0:0] p_Result_4_21_fu_1784_p3;
wire   [0:0] xor_ln879_22_fu_1791_p2;
wire   [8:0] store_22_V_fu_1797_p2;
wire   [0:0] p_Result_4_22_fu_1811_p3;
wire   [0:0] xor_ln879_23_fu_1818_p2;
wire   [8:0] store_23_V_fu_1824_p2;
wire   [0:0] p_Result_4_23_fu_1838_p3;
wire   [0:0] xor_ln879_24_fu_1845_p2;
wire   [8:0] store_24_V_fu_1851_p2;
wire   [0:0] p_Result_4_24_fu_1865_p3;
wire   [0:0] xor_ln879_25_fu_1872_p2;
wire   [8:0] store_25_V_fu_1878_p2;
wire   [0:0] p_Result_4_25_fu_1892_p3;
wire   [0:0] xor_ln879_26_fu_1899_p2;
wire   [8:0] store_26_V_fu_1905_p2;
wire   [0:0] p_Result_4_26_fu_1919_p3;
wire   [0:0] xor_ln879_27_fu_1926_p2;
wire   [8:0] store_27_V_fu_1932_p2;
wire   [0:0] p_Result_4_27_fu_1946_p3;
wire   [0:0] xor_ln879_28_fu_1953_p2;
wire   [8:0] store_28_V_fu_1959_p2;
wire   [0:0] p_Result_4_28_fu_1973_p3;
wire   [0:0] xor_ln879_29_fu_1980_p2;
wire   [8:0] store_29_V_fu_1986_p2;
wire   [0:0] p_Result_4_29_fu_2000_p3;
wire   [0:0] xor_ln879_30_fu_2007_p2;
wire   [8:0] store_30_V_fu_2013_p2;
wire   [0:0] p_Result_4_30_fu_2027_p3;
wire   [0:0] xor_ln879_31_fu_2034_p2;
wire   [8:0] store_31_V_fu_2040_p2;
wire   [7:0] zext_ln74_fu_2066_p1;
wire   [7:0] add_ln77_fu_2070_p2;
wire   [4:0] tmp_2_fu_2084_p33;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 axi_input_V_V_0_sel_rd = 1'b0;
#0 axi_input_V_V_0_sel_wr = 1'b0;
#0 axi_input_V_V_0_state = 2'd0;
#0 axi_output_V_V_1_sel_rd = 1'b0;
#0 axi_output_V_V_1_sel_wr = 1'b0;
#0 axi_output_V_V_1_state = 2'd0;
#0 weight_input_V_V_0_sel_rd = 1'b0;
#0 weight_input_V_V_0_sel_wr = 1'b0;
#0 weight_input_V_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

fully_connected_lbkb #(
    .DataWidth( 256 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
FILTER_WEIGHT_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FILTER_WEIGHT_V_address0),
    .ce0(FILTER_WEIGHT_V_ce0),
    .we0(FILTER_WEIGHT_V_we0),
    .d0(p_Val2_s_fu_160),
    .q0(FILTER_WEIGHT_V_q0)
);

fully_connected_lcud #(
    .DataWidth( 9 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
LIMIT_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LIMIT_V_address0),
    .ce0(LIMIT_V_ce0),
    .we0(LIMIT_V_we0),
    .d0(LIMIT_V_d0),
    .q0(LIMIT_V_q0)
);

fully_connected_layer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fully_connected_layer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .interrupt_flag_V(interrupt_flag_V)
);

fully_connected_ldEe #(
    .DataWidth( 1 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
input_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_data_V_address0),
    .ce0(input_data_V_ce0),
    .we0(input_data_V_we0),
    .d0(input_data_V_d0),
    .address1(input_data_V_address1),
    .ce1(input_data_V_ce1),
    .q1(input_data_V_q1)
);

fully_connected_leOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 9 ),
    .din4_WIDTH( 9 ),
    .din5_WIDTH( 9 ),
    .din6_WIDTH( 9 ),
    .din7_WIDTH( 9 ),
    .din8_WIDTH( 9 ),
    .din9_WIDTH( 9 ),
    .din10_WIDTH( 9 ),
    .din11_WIDTH( 9 ),
    .din12_WIDTH( 9 ),
    .din13_WIDTH( 9 ),
    .din14_WIDTH( 9 ),
    .din15_WIDTH( 9 ),
    .din16_WIDTH( 9 ),
    .din17_WIDTH( 9 ),
    .din18_WIDTH( 9 ),
    .din19_WIDTH( 9 ),
    .din20_WIDTH( 9 ),
    .din21_WIDTH( 9 ),
    .din22_WIDTH( 9 ),
    .din23_WIDTH( 9 ),
    .din24_WIDTH( 9 ),
    .din25_WIDTH( 9 ),
    .din26_WIDTH( 9 ),
    .din27_WIDTH( 9 ),
    .din28_WIDTH( 9 ),
    .din29_WIDTH( 9 ),
    .din30_WIDTH( 9 ),
    .din31_WIDTH( 9 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 9 ))
fully_connected_leOg_U1(
    .din0(store_0_V_0_reg_677),
    .din1(store_1_V_0_reg_665),
    .din2(store_2_V_0_reg_653),
    .din3(store_3_V_0_reg_641),
    .din4(store_4_V_0_reg_629),
    .din5(store_5_V_0_reg_617),
    .din6(store_6_V_0_reg_605),
    .din7(store_7_V_0_reg_593),
    .din8(store_8_V_0_reg_581),
    .din9(store_9_V_0_reg_569),
    .din10(store_10_V_0_reg_557),
    .din11(store_11_V_0_reg_545),
    .din12(store_12_V_0_reg_533),
    .din13(store_13_V_0_reg_521),
    .din14(store_14_V_0_reg_509),
    .din15(store_15_V_0_reg_497),
    .din16(store_16_V_0_reg_485),
    .din17(store_17_V_0_reg_473),
    .din18(store_18_V_0_reg_461),
    .din19(store_19_V_0_reg_449),
    .din20(store_20_V_0_reg_437),
    .din21(store_21_V_0_reg_425),
    .din22(store_22_V_0_reg_413),
    .din23(store_23_V_0_reg_401),
    .din24(store_24_V_0_reg_389),
    .din25(store_25_V_0_reg_377),
    .din26(store_26_V_0_reg_365),
    .din27(store_27_V_0_reg_353),
    .din28(store_28_V_0_reg_341),
    .din29(store_29_V_0_reg_329),
    .din30(store_30_V_0_reg_317),
    .din31(store_31_V_0_reg_305),
    .din32(tmp_2_fu_2084_p33),
    .dout(tmp_2_fu_2084_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state11)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axi_input_V_V_0_ack_out == 1'b1) & (axi_input_V_V_0_vld_out == 1'b1))) begin
            axi_input_V_V_0_sel_rd <= ~axi_input_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axi_input_V_V_0_ack_in == 1'b1) & (axi_input_V_V_0_vld_in == 1'b1))) begin
            axi_input_V_V_0_sel_wr <= ~axi_input_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_state <= 2'd0;
    end else begin
        if ((((axi_input_V_V_0_state == 2'd2) & (axi_input_V_V_0_vld_in == 1'b0)) | ((axi_input_V_V_0_state == 2'd3) & (axi_input_V_V_0_vld_in == 1'b0) & (axi_input_V_V_0_ack_out == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd2;
        end else if ((((axi_input_V_V_0_state == 2'd1) & (axi_input_V_V_0_ack_out == 1'b0)) | ((axi_input_V_V_0_state == 2'd3) & (axi_input_V_V_0_ack_out == 1'b0) & (axi_input_V_V_0_vld_in == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd1;
        end else if (((~((axi_input_V_V_0_vld_in == 1'b0) & (axi_input_V_V_0_ack_out == 1'b1)) & ~((axi_input_V_V_0_ack_out == 1'b0) & (axi_input_V_V_0_vld_in == 1'b1)) & (axi_input_V_V_0_state == 2'd3)) | ((axi_input_V_V_0_state == 2'd1) & (axi_input_V_V_0_ack_out == 1'b1)) | ((axi_input_V_V_0_state == 2'd2) & (axi_input_V_V_0_vld_in == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd3;
        end else begin
            axi_input_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_output_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axi_output_V_V_1_ack_out == 1'b1) & (axi_output_V_V_1_vld_out == 1'b1))) begin
            axi_output_V_V_1_sel_rd <= ~axi_output_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_output_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axi_output_V_V_1_ack_in == 1'b1) & (axi_output_V_V_1_vld_in == 1'b1))) begin
            axi_output_V_V_1_sel_wr <= ~axi_output_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_output_V_V_1_state <= 2'd0;
    end else begin
        if ((((axi_output_V_V_1_state == 2'd2) & (axi_output_V_V_1_vld_in == 1'b0)) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_1_vld_in == 1'b0) & (axi_output_V_V_1_ack_out == 1'b1)))) begin
            axi_output_V_V_1_state <= 2'd2;
        end else if ((((axi_output_V_V_1_state == 2'd1) & (axi_output_V_V_TREADY == 1'b0)) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0) & (axi_output_V_V_1_vld_in == 1'b1)))) begin
            axi_output_V_V_1_state <= 2'd1;
        end else if (((~((axi_output_V_V_1_vld_in == 1'b0) & (axi_output_V_V_1_ack_out == 1'b1)) & ~((axi_output_V_V_TREADY == 1'b0) & (axi_output_V_V_1_vld_in == 1'b1)) & (axi_output_V_V_1_state == 2'd3)) | ((axi_output_V_V_1_state == 2'd1) & (axi_output_V_V_1_ack_out == 1'b1)) | ((axi_output_V_V_1_state == 2'd2) & (axi_output_V_V_1_vld_in == 1'b1)))) begin
            axi_output_V_V_1_state <= 2'd3;
        end else begin
            axi_output_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_input_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((weight_input_V_V_0_ack_out == 1'b1) & (weight_input_V_V_0_vld_out == 1'b1))) begin
            weight_input_V_V_0_sel_rd <= ~weight_input_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_input_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((weight_input_V_V_0_ack_in == 1'b1) & (weight_input_V_V_0_vld_in == 1'b1))) begin
            weight_input_V_V_0_sel_wr <= ~weight_input_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        weight_input_V_V_0_state <= 2'd0;
    end else begin
        if ((((weight_input_V_V_0_state == 2'd2) & (weight_input_V_V_0_vld_in == 1'b0)) | ((weight_input_V_V_0_state == 2'd3) & (weight_input_V_V_0_vld_in == 1'b0) & (weight_input_V_V_0_ack_out == 1'b1)))) begin
            weight_input_V_V_0_state <= 2'd2;
        end else if ((((weight_input_V_V_0_state == 2'd1) & (weight_input_V_V_0_ack_out == 1'b0)) | ((weight_input_V_V_0_state == 2'd3) & (weight_input_V_V_0_ack_out == 1'b0) & (weight_input_V_V_0_vld_in == 1'b1)))) begin
            weight_input_V_V_0_state <= 2'd1;
        end else if (((~((weight_input_V_V_0_vld_in == 1'b0) & (weight_input_V_V_0_ack_out == 1'b1)) & ~((weight_input_V_V_0_ack_out == 1'b0) & (weight_input_V_V_0_vld_in == 1'b1)) & (weight_input_V_V_0_state == 2'd3)) | ((weight_input_V_V_0_state == 2'd1) & (weight_input_V_V_0_ack_out == 1'b1)) | ((weight_input_V_V_0_state == 2'd2) & (weight_input_V_V_0_vld_in == 1'b1)))) begin
            weight_input_V_V_0_state <= 2'd3;
        end else begin
            weight_input_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_716_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bvh_d_index_reg_272 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bvh_d_index_reg_272 <= j_reg_2191;
    end
end

always @ (posedge ap_clk) begin
    if (((interrupt_flag_V_rea_read_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_260 <= 9'd0;
    end else if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (icmp_ln22_fu_736_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_260 <= i_reg_2178;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_716_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        n_0_reg_283 <= 9'd0;
    end else if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1)) & (interrupt_flag_V_rea_reg_2159 == 1'd1) & (icmp_ln34_fu_796_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        n_0_reg_283 <= n_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_0_V_0_reg_677 <= store_0_V_1_fu_1209_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_0_V_0_reg_677 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_10_V_0_reg_557 <= store_10_V_1_fu_1479_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_10_V_0_reg_557 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_11_V_0_reg_545 <= store_11_V_1_fu_1506_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_11_V_0_reg_545 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_12_V_0_reg_533 <= store_12_V_1_fu_1533_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_12_V_0_reg_533 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_13_V_0_reg_521 <= store_13_V_1_fu_1560_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_13_V_0_reg_521 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_14_V_0_reg_509 <= store_14_V_1_fu_1587_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_14_V_0_reg_509 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_15_V_0_reg_497 <= store_15_V_1_fu_1614_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_15_V_0_reg_497 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_16_V_0_reg_485 <= store_16_V_1_fu_1641_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_16_V_0_reg_485 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_17_V_0_reg_473 <= store_17_V_1_fu_1668_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_17_V_0_reg_473 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_18_V_0_reg_461 <= store_18_V_1_fu_1695_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_18_V_0_reg_461 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_19_V_0_reg_449 <= store_19_V_1_fu_1722_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_19_V_0_reg_449 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_1_V_0_reg_665 <= store_1_V_1_fu_1236_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_1_V_0_reg_665 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_20_V_0_reg_437 <= store_20_V_1_fu_1749_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_20_V_0_reg_437 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_21_V_0_reg_425 <= store_21_V_1_fu_1776_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_21_V_0_reg_425 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_22_V_0_reg_413 <= store_22_V_1_fu_1803_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_22_V_0_reg_413 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_23_V_0_reg_401 <= store_23_V_1_fu_1830_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_23_V_0_reg_401 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_24_V_0_reg_389 <= store_24_V_1_fu_1857_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_24_V_0_reg_389 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_25_V_0_reg_377 <= store_25_V_1_fu_1884_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_25_V_0_reg_377 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_26_V_0_reg_365 <= store_26_V_1_fu_1911_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_26_V_0_reg_365 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_27_V_0_reg_353 <= store_27_V_1_fu_1938_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_27_V_0_reg_353 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_28_V_0_reg_341 <= store_28_V_1_fu_1965_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_28_V_0_reg_341 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_29_V_0_reg_329 <= store_29_V_1_fu_1992_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_29_V_0_reg_329 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_2_V_0_reg_653 <= store_2_V_1_fu_1263_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_2_V_0_reg_653 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_30_V_0_reg_317 <= store_30_V_1_fu_2019_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_30_V_0_reg_317 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_31_V_0_reg_305 <= store_31_V_1_fu_2046_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_31_V_0_reg_305 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_3_V_0_reg_641 <= store_3_V_1_fu_1290_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_3_V_0_reg_641 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_4_V_0_reg_629 <= store_4_V_1_fu_1317_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_4_V_0_reg_629 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_5_V_0_reg_617 <= store_5_V_1_fu_1344_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_5_V_0_reg_617 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_6_V_0_reg_605 <= store_6_V_1_fu_1371_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_6_V_0_reg_605 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_7_V_0_reg_593 <= store_7_V_1_fu_1398_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_7_V_0_reg_593 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_8_V_0_reg_581 <= store_8_V_1_fu_1425_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_8_V_0_reg_581 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_9_V_0_reg_569 <= store_9_V_1_fu_1452_p3;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        store_9_V_0_reg_569 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        t_0_reg_294 <= t_reg_2216;
    end else if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1)) & (1'b1 == ap_CS_fsm_state5) & ((icmp_ln34_fu_796_p2 == 1'd1) | (interrupt_flag_V_rea_reg_2159 == 1'd0)))) begin
        t_0_reg_294 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_2390 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_0_reg_689 <= u_reg_2394;
    end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        u_0_reg_689 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_0_reg_701 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln74_fu_2054_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        w_0_reg_701 <= w_fu_2060_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_input_V_V_0_load_A == 1'b1)) begin
        axi_input_V_V_0_payload_A <= axi_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_input_V_V_0_load_B == 1'b1)) begin
        axi_input_V_V_0_payload_B <= axi_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_output_V_V_1_load_A == 1'b1)) begin
        axi_output_V_V_1_payload_A <= axi_output_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_output_V_V_1_load_B == 1'b1)) begin
        axi_output_V_V_1_payload_B <= axi_output_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_2178 <= i_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln57_reg_2390 <= icmp_ln57_fu_1162_p2;
        icmp_ln57_reg_2390_pp0_iter1_reg <= icmp_ln57_reg_2390;
    end
end

always @ (posedge ap_clk) begin
    if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln60_reg_2221 <= icmp_ln60_fu_830_p2;
        shl_ln_reg_2225[7 : 5] <= shl_ln_fu_840_p3[7 : 5];
        zext_ln67_10_reg_2275[7 : 5] <= zext_ln67_10_fu_938_p1[7 : 5];
        zext_ln67_11_reg_2280[7 : 5] <= zext_ln67_11_fu_948_p1[7 : 5];
        zext_ln67_12_reg_2285[7 : 5] <= zext_ln67_12_fu_958_p1[7 : 5];
        zext_ln67_13_reg_2290[7 : 5] <= zext_ln67_13_fu_968_p1[7 : 5];
        zext_ln67_14_reg_2295[7 : 5] <= zext_ln67_14_fu_978_p1[7 : 5];
        zext_ln67_15_reg_2300[7 : 5] <= zext_ln67_15_fu_988_p1[7 : 5];
        zext_ln67_16_reg_2305[7 : 5] <= zext_ln67_16_fu_998_p1[7 : 5];
        zext_ln67_17_reg_2310[7 : 5] <= zext_ln67_17_fu_1008_p1[7 : 5];
        zext_ln67_18_reg_2315[7 : 5] <= zext_ln67_18_fu_1018_p1[7 : 5];
        zext_ln67_19_reg_2320[7 : 5] <= zext_ln67_19_fu_1028_p1[7 : 5];
        zext_ln67_1_reg_2230[7 : 5] <= zext_ln67_1_fu_848_p1[7 : 5];
        zext_ln67_20_reg_2325[7 : 5] <= zext_ln67_20_fu_1038_p1[7 : 5];
        zext_ln67_21_reg_2330[7 : 5] <= zext_ln67_21_fu_1048_p1[7 : 5];
        zext_ln67_22_reg_2335[7 : 5] <= zext_ln67_22_fu_1058_p1[7 : 5];
        zext_ln67_23_reg_2340[7 : 5] <= zext_ln67_23_fu_1068_p1[7 : 5];
        zext_ln67_24_reg_2345[7 : 5] <= zext_ln67_24_fu_1078_p1[7 : 5];
        zext_ln67_25_reg_2350[7 : 5] <= zext_ln67_25_fu_1088_p1[7 : 5];
        zext_ln67_26_reg_2355[7 : 5] <= zext_ln67_26_fu_1098_p1[7 : 5];
        zext_ln67_27_reg_2360[7 : 5] <= zext_ln67_27_fu_1108_p1[7 : 5];
        zext_ln67_28_reg_2365[7 : 5] <= zext_ln67_28_fu_1118_p1[7 : 5];
        zext_ln67_29_reg_2370[7 : 5] <= zext_ln67_29_fu_1128_p1[7 : 5];
        zext_ln67_2_reg_2235[7 : 5] <= zext_ln67_2_fu_858_p1[7 : 5];
        zext_ln67_30_reg_2375[7 : 5] <= zext_ln67_30_fu_1138_p1[7 : 5];
        zext_ln67_31_reg_2380[7 : 5] <= zext_ln67_31_fu_1148_p1[7 : 5];
        zext_ln67_32_reg_2385[7 : 5] <= zext_ln67_32_fu_1158_p1[7 : 5];
        zext_ln67_3_reg_2240[7 : 5] <= zext_ln67_3_fu_868_p1[7 : 5];
        zext_ln67_4_reg_2245[7 : 5] <= zext_ln67_4_fu_878_p1[7 : 5];
        zext_ln67_5_reg_2250[7 : 5] <= zext_ln67_5_fu_888_p1[7 : 5];
        zext_ln67_6_reg_2255[7 : 5] <= zext_ln67_6_fu_898_p1[7 : 5];
        zext_ln67_7_reg_2260[7 : 5] <= zext_ln67_7_fu_908_p1[7 : 5];
        zext_ln67_8_reg_2265[7 : 5] <= zext_ln67_8_fu_918_p1[7 : 5];
        zext_ln67_9_reg_2270[7 : 5] <= zext_ln67_9_fu_928_p1[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln895_reg_2588 <= icmp_ln895_fu_2154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln895_reg_2588_pp1_iter2_reg <= icmp_ln895_reg_2588;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        interrupt_flag_V_rea_reg_2159 <= interrupt_flag_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_2191 <= j_fu_742_p2;
        zext_ln22_reg_2183[8 : 0] <= zext_ln22_fu_732_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (icmp_ln25_fu_752_p2 == 1'd1) & (icmp_ln22_fu_736_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_1_fu_164 <= weight_input_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_s_fu_160 <= p_Result_2_fu_782_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state6))) begin
        t_reg_2216 <= t_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln74_fu_2054_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_2_reg_2578 <= tmp_2_fu_2084_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_reg_2394 <= u_fu_1168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_input_V_V_0_load_A == 1'b1)) begin
        weight_input_V_V_0_payload_A <= weight_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((weight_input_V_V_0_load_B == 1'b1)) begin
        weight_input_V_V_0_payload_B <= weight_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (icmp_ln22_fu_736_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln24_reg_2196[5 : 0] <= zext_ln24_fu_748_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FILTER_WEIGHT_V_address0 = zext_ln67_fu_1184_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        FILTER_WEIGHT_V_address0 = zext_ln31_fu_763_p1;
    end else begin
        FILTER_WEIGHT_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        FILTER_WEIGHT_V_ce0 = 1'b1;
    end else begin
        FILTER_WEIGHT_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (icmp_ln22_fu_736_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        FILTER_WEIGHT_V_we0 = 1'b1;
    end else begin
        FILTER_WEIGHT_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        LIMIT_V_address0 = zext_ln77_fu_2075_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LIMIT_V_address0 = zext_ln36_fu_808_p1;
    end else begin
        LIMIT_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1)) & (1'b1 == ap_CS_fsm_state5)))) begin
        LIMIT_V_ce0 = 1'b1;
    end else begin
        LIMIT_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1)) & (interrupt_flag_V_rea_reg_2159 == 1'd1) & (icmp_ln34_fu_796_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        LIMIT_V_we0 = 1'b1;
    end else begin
        LIMIT_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln57_fu_1162_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_2054_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_reg_2390 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_u_0_phi_fu_693_p4 = u_reg_2394;
    end else begin
        ap_phi_mux_u_0_phi_fu_693_p4 = u_0_reg_689;
    end
end

always @ (*) begin
    if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op190_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_input_V_V_0_ack_out = 1'b1;
    end else begin
        axi_input_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axi_input_V_V_0_sel == 1'b1)) begin
        axi_input_V_V_0_data_out = axi_input_V_V_0_payload_B;
    end else begin
        axi_input_V_V_0_data_out = axi_input_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln60_reg_2221 == 1'd1) & (icmp_ln57_fu_1162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_input_V_V_TDATA_blk_n = axi_input_V_V_0_state[1'd0];
    end else begin
        axi_input_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        if ((icmp_ln895_reg_2588 == 1'd1)) begin
            axi_output_V_V_1_data_in = 8'd1;
        end else if ((icmp_ln895_reg_2588 == 1'd0)) begin
            axi_output_V_V_1_data_in = 8'd0;
        end else begin
            axi_output_V_V_1_data_in = 'bx;
        end
    end else begin
        axi_output_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((axi_output_V_V_1_sel == 1'b1)) begin
        axi_output_V_V_1_data_out = axi_output_V_V_1_payload_B;
    end else begin
        axi_output_V_V_1_data_out = axi_output_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln895_reg_2588 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln895_reg_2588 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        axi_output_V_V_1_vld_in = 1'b1;
    end else begin
        axi_output_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln895_reg_2588_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((icmp_ln895_reg_2588_pp1_iter2_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((icmp_ln895_reg_2588 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln895_reg_2588 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        axi_output_V_V_TDATA_blk_n = axi_output_V_V_1_state[1'd1];
    end else begin
        axi_output_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_data_V_ce0 = 1'b1;
    end else begin
        input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_data_V_ce1 = 1'b1;
    end else begin
        input_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_reg_2221 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_data_V_we0 = 1'b1;
    end else begin
        input_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1)) & (ap_predicate_op69_read_state5 == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | (~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (ap_predicate_op48_read_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        weight_input_V_V_0_ack_out = 1'b1;
    end else begin
        weight_input_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((weight_input_V_V_0_sel == 1'b1)) begin
        weight_input_V_V_0_data_out = weight_input_V_V_0_payload_B;
    end else begin
        weight_input_V_V_0_data_out = weight_input_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((interrupt_flag_V_rea_reg_2159 == 1'd1) & (icmp_ln34_fu_796_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln25_fu_752_p2 == 1'd1) & (icmp_ln22_fu_736_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        weight_input_V_V_TDATA_blk_n = weight_input_V_V_0_state[1'd0];
    end else begin
        weight_input_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((interrupt_flag_V_rea_read_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((interrupt_flag_V_rea_read_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln20_fu_716_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (icmp_ln22_fu_736_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1)) & (icmp_ln22_fu_736_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1)) & (1'b1 == ap_CS_fsm_state5) & ((icmp_ln34_fu_796_p2 == 1'd1) | (interrupt_flag_V_rea_reg_2159 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1)) & (interrupt_flag_V_rea_reg_2159 == 1'd1) & (icmp_ln34_fu_796_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (icmp_ln46_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln57_fu_1162_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln57_fu_1162_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln74_fu_2054_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln74_fu_2054_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LIMIT_V_d0 = weight_input_V_V_0_data_out[8:0];

assign add_ln77_fu_2070_p2 = (shl_ln_reg_2225 + zext_ln74_fu_2066_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((axi_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op190_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((axi_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op190_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter2 == 1'b1)));
end

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = (((icmp_ln895_reg_2588 == 1'd0) & (axi_output_V_V_1_ack_in == 1'b0)) | ((icmp_ln895_reg_2588 == 1'd1) & (axi_output_V_V_1_ack_in == 1'b0)));
end

assign ap_block_state13_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = (((icmp_ln895_reg_2588_pp1_iter2_reg == 1'd0) & (axi_output_V_V_1_ack_in == 1'b0)) | ((icmp_ln895_reg_2588_pp1_iter2_reg == 1'd1) & (axi_output_V_V_1_ack_in == 1'b0)));
end

assign ap_block_state14_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = ((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op48_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state5 = ((weight_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6 = ((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter0 = ((axi_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op190_read_state7 == 1'b1));
end

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_op190_read_state7 = ((icmp_ln60_reg_2221 == 1'd1) & (icmp_ln57_fu_1162_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op48_read_state3 = ((icmp_ln25_fu_752_p2 == 1'd1) & (icmp_ln22_fu_736_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op69_read_state5 = ((interrupt_flag_V_rea_reg_2159 == 1'd1) & (icmp_ln34_fu_796_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axi_input_V_V_0_ack_in = axi_input_V_V_0_state[1'd1];

assign axi_input_V_V_0_load_A = (~axi_input_V_V_0_sel_wr & axi_input_V_V_0_state_cmp_full);

assign axi_input_V_V_0_load_B = (axi_input_V_V_0_state_cmp_full & axi_input_V_V_0_sel_wr);

assign axi_input_V_V_0_sel = axi_input_V_V_0_sel_rd;

assign axi_input_V_V_0_state_cmp_full = ((axi_input_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axi_input_V_V_0_vld_in = axi_input_V_V_TVALID;

assign axi_input_V_V_0_vld_out = axi_input_V_V_0_state[1'd0];

assign axi_input_V_V_TREADY = axi_input_V_V_0_state[1'd1];

assign axi_output_V_V_1_ack_in = axi_output_V_V_1_state[1'd1];

assign axi_output_V_V_1_ack_out = axi_output_V_V_TREADY;

assign axi_output_V_V_1_load_A = (~axi_output_V_V_1_sel_wr & axi_output_V_V_1_state_cmp_full);

assign axi_output_V_V_1_load_B = (axi_output_V_V_1_state_cmp_full & axi_output_V_V_1_sel_wr);

assign axi_output_V_V_1_sel = axi_output_V_V_1_sel_rd;

assign axi_output_V_V_1_state_cmp_full = ((axi_output_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axi_output_V_V_1_vld_out = axi_output_V_V_1_state[1'd0];

assign axi_output_V_V_TDATA = axi_output_V_V_1_data_out;

assign axi_output_V_V_TVALID = axi_output_V_V_1_state[1'd0];

assign i_fu_722_p2 = (i_0_reg_260 + 9'd1);

assign icmp_ln20_fu_716_p2 = ((i_0_reg_260 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_736_p2 = ((bvh_d_index_reg_272 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_752_p2 = ((j64_fu_728_p1 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_796_p2 = ((n_0_reg_283 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_818_p2 = ((t_0_reg_294 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_1162_p2 = ((ap_phi_mux_u_0_phi_fu_693_p4 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_830_p2 = ((t_0_reg_294 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_2054_p2 = ((w_0_reg_701 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_2154_p2 = ((tmp_2_reg_2578 > LIMIT_V_q0) ? 1'b1 : 1'b0);

assign input_data_V_address0 = zext_ln61_fu_1174_p1;

assign input_data_V_address1 = zext_ln67_fu_1184_p1;

assign input_data_V_d0 = axi_input_V_V_0_data_out[0:0];

assign interrupt_flag_V_rea_read_fu_168_p2 = interrupt_flag_V;

assign j64_fu_728_p1 = bvh_d_index_reg_272[5:0];

assign j_fu_742_p2 = (9'd1 + bvh_d_index_reg_272);

assign n_fu_802_p2 = (n_0_reg_283 + 9'd1);

assign or_ln67_10_fu_952_p2 = (shl_ln_fu_840_p3 | 8'd11);

assign or_ln67_11_fu_962_p2 = (shl_ln_fu_840_p3 | 8'd12);

assign or_ln67_12_fu_972_p2 = (shl_ln_fu_840_p3 | 8'd13);

assign or_ln67_13_fu_982_p2 = (shl_ln_fu_840_p3 | 8'd14);

assign or_ln67_14_fu_992_p2 = (shl_ln_fu_840_p3 | 8'd15);

assign or_ln67_15_fu_1002_p2 = (shl_ln_fu_840_p3 | 8'd16);

assign or_ln67_16_fu_1012_p2 = (shl_ln_fu_840_p3 | 8'd17);

assign or_ln67_17_fu_1022_p2 = (shl_ln_fu_840_p3 | 8'd18);

assign or_ln67_18_fu_1032_p2 = (shl_ln_fu_840_p3 | 8'd19);

assign or_ln67_19_fu_1042_p2 = (shl_ln_fu_840_p3 | 8'd20);

assign or_ln67_1_fu_862_p2 = (shl_ln_fu_840_p3 | 8'd2);

assign or_ln67_20_fu_1052_p2 = (shl_ln_fu_840_p3 | 8'd21);

assign or_ln67_21_fu_1062_p2 = (shl_ln_fu_840_p3 | 8'd22);

assign or_ln67_22_fu_1072_p2 = (shl_ln_fu_840_p3 | 8'd23);

assign or_ln67_23_fu_1082_p2 = (shl_ln_fu_840_p3 | 8'd24);

assign or_ln67_24_fu_1092_p2 = (shl_ln_fu_840_p3 | 8'd25);

assign or_ln67_25_fu_1102_p2 = (shl_ln_fu_840_p3 | 8'd26);

assign or_ln67_26_fu_1112_p2 = (shl_ln_fu_840_p3 | 8'd27);

assign or_ln67_27_fu_1122_p2 = (shl_ln_fu_840_p3 | 8'd28);

assign or_ln67_28_fu_1132_p2 = (shl_ln_fu_840_p3 | 8'd29);

assign or_ln67_29_fu_1142_p2 = (shl_ln_fu_840_p3 | 8'd30);

assign or_ln67_2_fu_872_p2 = (shl_ln_fu_840_p3 | 8'd3);

assign or_ln67_30_fu_1152_p2 = (shl_ln_fu_840_p3 | 8'd31);

assign or_ln67_3_fu_882_p2 = (shl_ln_fu_840_p3 | 8'd4);

assign or_ln67_4_fu_892_p2 = (shl_ln_fu_840_p3 | 8'd5);

assign or_ln67_5_fu_902_p2 = (shl_ln_fu_840_p3 | 8'd6);

assign or_ln67_6_fu_912_p2 = (shl_ln_fu_840_p3 | 8'd7);

assign or_ln67_7_fu_922_p2 = (shl_ln_fu_840_p3 | 8'd8);

assign or_ln67_8_fu_932_p2 = (shl_ln_fu_840_p3 | 8'd9);

assign or_ln67_9_fu_942_p2 = (shl_ln_fu_840_p3 | 8'd10);

assign or_ln67_fu_852_p2 = (shl_ln_fu_840_p3 | 8'd1);

assign p_Repl2_s_fu_778_p1 = p_Result_s_fu_771_p3;

always @ (*) begin
    p_Result_2_fu_782_p4 = p_Val2_s_fu_160;
    p_Result_2_fu_782_p4[zext_ln22_reg_2183] = |(p_Repl2_s_fu_778_p1);
end

assign p_Result_4_10_fu_1487_p3 = FILTER_WEIGHT_V_q0[zext_ln67_12_reg_2285];

assign p_Result_4_11_fu_1514_p3 = FILTER_WEIGHT_V_q0[zext_ln67_13_reg_2290];

assign p_Result_4_12_fu_1541_p3 = FILTER_WEIGHT_V_q0[zext_ln67_14_reg_2295];

assign p_Result_4_13_fu_1568_p3 = FILTER_WEIGHT_V_q0[zext_ln67_15_reg_2300];

assign p_Result_4_14_fu_1595_p3 = FILTER_WEIGHT_V_q0[zext_ln67_16_reg_2305];

assign p_Result_4_15_fu_1622_p3 = FILTER_WEIGHT_V_q0[zext_ln67_17_reg_2310];

assign p_Result_4_16_fu_1649_p3 = FILTER_WEIGHT_V_q0[zext_ln67_18_reg_2315];

assign p_Result_4_17_fu_1676_p3 = FILTER_WEIGHT_V_q0[zext_ln67_19_reg_2320];

assign p_Result_4_18_fu_1703_p3 = FILTER_WEIGHT_V_q0[zext_ln67_20_reg_2325];

assign p_Result_4_19_fu_1730_p3 = FILTER_WEIGHT_V_q0[zext_ln67_21_reg_2330];

assign p_Result_4_1_fu_1217_p3 = FILTER_WEIGHT_V_q0[zext_ln67_2_reg_2235];

assign p_Result_4_20_fu_1757_p3 = FILTER_WEIGHT_V_q0[zext_ln67_22_reg_2335];

assign p_Result_4_21_fu_1784_p3 = FILTER_WEIGHT_V_q0[zext_ln67_23_reg_2340];

assign p_Result_4_22_fu_1811_p3 = FILTER_WEIGHT_V_q0[zext_ln67_24_reg_2345];

assign p_Result_4_23_fu_1838_p3 = FILTER_WEIGHT_V_q0[zext_ln67_25_reg_2350];

assign p_Result_4_24_fu_1865_p3 = FILTER_WEIGHT_V_q0[zext_ln67_26_reg_2355];

assign p_Result_4_25_fu_1892_p3 = FILTER_WEIGHT_V_q0[zext_ln67_27_reg_2360];

assign p_Result_4_26_fu_1919_p3 = FILTER_WEIGHT_V_q0[zext_ln67_28_reg_2365];

assign p_Result_4_27_fu_1946_p3 = FILTER_WEIGHT_V_q0[zext_ln67_29_reg_2370];

assign p_Result_4_28_fu_1973_p3 = FILTER_WEIGHT_V_q0[zext_ln67_30_reg_2375];

assign p_Result_4_29_fu_2000_p3 = FILTER_WEIGHT_V_q0[zext_ln67_31_reg_2380];

assign p_Result_4_2_fu_1244_p3 = FILTER_WEIGHT_V_q0[zext_ln67_3_reg_2240];

assign p_Result_4_30_fu_2027_p3 = FILTER_WEIGHT_V_q0[zext_ln67_32_reg_2385];

assign p_Result_4_3_fu_1271_p3 = FILTER_WEIGHT_V_q0[zext_ln67_4_reg_2245];

assign p_Result_4_4_fu_1298_p3 = FILTER_WEIGHT_V_q0[zext_ln67_5_reg_2250];

assign p_Result_4_5_fu_1325_p3 = FILTER_WEIGHT_V_q0[zext_ln67_6_reg_2255];

assign p_Result_4_6_fu_1352_p3 = FILTER_WEIGHT_V_q0[zext_ln67_7_reg_2260];

assign p_Result_4_7_fu_1379_p3 = FILTER_WEIGHT_V_q0[zext_ln67_8_reg_2265];

assign p_Result_4_8_fu_1406_p3 = FILTER_WEIGHT_V_q0[zext_ln67_9_reg_2270];

assign p_Result_4_9_fu_1433_p3 = FILTER_WEIGHT_V_q0[zext_ln67_10_reg_2275];

assign p_Result_4_fu_1190_p3 = FILTER_WEIGHT_V_q0[zext_ln67_1_reg_2230];

assign p_Result_4_s_fu_1460_p3 = FILTER_WEIGHT_V_q0[zext_ln67_11_reg_2280];

assign p_Result_s_fu_771_p3 = p_Val2_1_fu_164[zext_ln24_reg_2196];

assign shl_ln_fu_840_p3 = {{trunc_ln67_fu_836_p1}, {5'd0}};

assign store_0_V_1_fu_1209_p3 = ((xor_ln879_fu_1197_p2[0:0] === 1'b1) ? store_0_V_0_reg_677 : store_0_V_fu_1203_p2);

assign store_0_V_fu_1203_p2 = (store_0_V_0_reg_677 + 9'd1);

assign store_10_V_1_fu_1479_p3 = ((xor_ln879_10_fu_1467_p2[0:0] === 1'b1) ? store_10_V_0_reg_557 : store_10_V_fu_1473_p2);

assign store_10_V_fu_1473_p2 = (store_10_V_0_reg_557 + 9'd1);

assign store_11_V_1_fu_1506_p3 = ((xor_ln879_11_fu_1494_p2[0:0] === 1'b1) ? store_11_V_0_reg_545 : store_11_V_fu_1500_p2);

assign store_11_V_fu_1500_p2 = (store_11_V_0_reg_545 + 9'd1);

assign store_12_V_1_fu_1533_p3 = ((xor_ln879_12_fu_1521_p2[0:0] === 1'b1) ? store_12_V_0_reg_533 : store_12_V_fu_1527_p2);

assign store_12_V_fu_1527_p2 = (store_12_V_0_reg_533 + 9'd1);

assign store_13_V_1_fu_1560_p3 = ((xor_ln879_13_fu_1548_p2[0:0] === 1'b1) ? store_13_V_0_reg_521 : store_13_V_fu_1554_p2);

assign store_13_V_fu_1554_p2 = (store_13_V_0_reg_521 + 9'd1);

assign store_14_V_1_fu_1587_p3 = ((xor_ln879_14_fu_1575_p2[0:0] === 1'b1) ? store_14_V_0_reg_509 : store_14_V_fu_1581_p2);

assign store_14_V_fu_1581_p2 = (store_14_V_0_reg_509 + 9'd1);

assign store_15_V_1_fu_1614_p3 = ((xor_ln879_15_fu_1602_p2[0:0] === 1'b1) ? store_15_V_0_reg_497 : store_15_V_fu_1608_p2);

assign store_15_V_fu_1608_p2 = (store_15_V_0_reg_497 + 9'd1);

assign store_16_V_1_fu_1641_p3 = ((xor_ln879_16_fu_1629_p2[0:0] === 1'b1) ? store_16_V_0_reg_485 : store_16_V_fu_1635_p2);

assign store_16_V_fu_1635_p2 = (store_16_V_0_reg_485 + 9'd1);

assign store_17_V_1_fu_1668_p3 = ((xor_ln879_17_fu_1656_p2[0:0] === 1'b1) ? store_17_V_0_reg_473 : store_17_V_fu_1662_p2);

assign store_17_V_fu_1662_p2 = (store_17_V_0_reg_473 + 9'd1);

assign store_18_V_1_fu_1695_p3 = ((xor_ln879_18_fu_1683_p2[0:0] === 1'b1) ? store_18_V_0_reg_461 : store_18_V_fu_1689_p2);

assign store_18_V_fu_1689_p2 = (store_18_V_0_reg_461 + 9'd1);

assign store_19_V_1_fu_1722_p3 = ((xor_ln879_19_fu_1710_p2[0:0] === 1'b1) ? store_19_V_0_reg_449 : store_19_V_fu_1716_p2);

assign store_19_V_fu_1716_p2 = (store_19_V_0_reg_449 + 9'd1);

assign store_1_V_1_fu_1236_p3 = ((xor_ln879_1_fu_1224_p2[0:0] === 1'b1) ? store_1_V_0_reg_665 : store_1_V_fu_1230_p2);

assign store_1_V_fu_1230_p2 = (store_1_V_0_reg_665 + 9'd1);

assign store_20_V_1_fu_1749_p3 = ((xor_ln879_20_fu_1737_p2[0:0] === 1'b1) ? store_20_V_0_reg_437 : store_20_V_fu_1743_p2);

assign store_20_V_fu_1743_p2 = (store_20_V_0_reg_437 + 9'd1);

assign store_21_V_1_fu_1776_p3 = ((xor_ln879_21_fu_1764_p2[0:0] === 1'b1) ? store_21_V_0_reg_425 : store_21_V_fu_1770_p2);

assign store_21_V_fu_1770_p2 = (store_21_V_0_reg_425 + 9'd1);

assign store_22_V_1_fu_1803_p3 = ((xor_ln879_22_fu_1791_p2[0:0] === 1'b1) ? store_22_V_0_reg_413 : store_22_V_fu_1797_p2);

assign store_22_V_fu_1797_p2 = (store_22_V_0_reg_413 + 9'd1);

assign store_23_V_1_fu_1830_p3 = ((xor_ln879_23_fu_1818_p2[0:0] === 1'b1) ? store_23_V_0_reg_401 : store_23_V_fu_1824_p2);

assign store_23_V_fu_1824_p2 = (store_23_V_0_reg_401 + 9'd1);

assign store_24_V_1_fu_1857_p3 = ((xor_ln879_24_fu_1845_p2[0:0] === 1'b1) ? store_24_V_0_reg_389 : store_24_V_fu_1851_p2);

assign store_24_V_fu_1851_p2 = (store_24_V_0_reg_389 + 9'd1);

assign store_25_V_1_fu_1884_p3 = ((xor_ln879_25_fu_1872_p2[0:0] === 1'b1) ? store_25_V_0_reg_377 : store_25_V_fu_1878_p2);

assign store_25_V_fu_1878_p2 = (store_25_V_0_reg_377 + 9'd1);

assign store_26_V_1_fu_1911_p3 = ((xor_ln879_26_fu_1899_p2[0:0] === 1'b1) ? store_26_V_0_reg_365 : store_26_V_fu_1905_p2);

assign store_26_V_fu_1905_p2 = (store_26_V_0_reg_365 + 9'd1);

assign store_27_V_1_fu_1938_p3 = ((xor_ln879_27_fu_1926_p2[0:0] === 1'b1) ? store_27_V_0_reg_353 : store_27_V_fu_1932_p2);

assign store_27_V_fu_1932_p2 = (store_27_V_0_reg_353 + 9'd1);

assign store_28_V_1_fu_1965_p3 = ((xor_ln879_28_fu_1953_p2[0:0] === 1'b1) ? store_28_V_0_reg_341 : store_28_V_fu_1959_p2);

assign store_28_V_fu_1959_p2 = (store_28_V_0_reg_341 + 9'd1);

assign store_29_V_1_fu_1992_p3 = ((xor_ln879_29_fu_1980_p2[0:0] === 1'b1) ? store_29_V_0_reg_329 : store_29_V_fu_1986_p2);

assign store_29_V_fu_1986_p2 = (store_29_V_0_reg_329 + 9'd1);

assign store_2_V_1_fu_1263_p3 = ((xor_ln879_2_fu_1251_p2[0:0] === 1'b1) ? store_2_V_0_reg_653 : store_2_V_fu_1257_p2);

assign store_2_V_fu_1257_p2 = (store_2_V_0_reg_653 + 9'd1);

assign store_30_V_1_fu_2019_p3 = ((xor_ln879_30_fu_2007_p2[0:0] === 1'b1) ? store_30_V_0_reg_317 : store_30_V_fu_2013_p2);

assign store_30_V_fu_2013_p2 = (store_30_V_0_reg_317 + 9'd1);

assign store_31_V_1_fu_2046_p3 = ((xor_ln879_31_fu_2034_p2[0:0] === 1'b1) ? store_31_V_0_reg_305 : store_31_V_fu_2040_p2);

assign store_31_V_fu_2040_p2 = (store_31_V_0_reg_305 + 9'd1);

assign store_3_V_1_fu_1290_p3 = ((xor_ln879_3_fu_1278_p2[0:0] === 1'b1) ? store_3_V_0_reg_641 : store_3_V_fu_1284_p2);

assign store_3_V_fu_1284_p2 = (store_3_V_0_reg_641 + 9'd1);

assign store_4_V_1_fu_1317_p3 = ((xor_ln879_4_fu_1305_p2[0:0] === 1'b1) ? store_4_V_0_reg_629 : store_4_V_fu_1311_p2);

assign store_4_V_fu_1311_p2 = (store_4_V_0_reg_629 + 9'd1);

assign store_5_V_1_fu_1344_p3 = ((xor_ln879_5_fu_1332_p2[0:0] === 1'b1) ? store_5_V_0_reg_617 : store_5_V_fu_1338_p2);

assign store_5_V_fu_1338_p2 = (store_5_V_0_reg_617 + 9'd1);

assign store_6_V_1_fu_1371_p3 = ((xor_ln879_6_fu_1359_p2[0:0] === 1'b1) ? store_6_V_0_reg_605 : store_6_V_fu_1365_p2);

assign store_6_V_fu_1365_p2 = (store_6_V_0_reg_605 + 9'd1);

assign store_7_V_1_fu_1398_p3 = ((xor_ln879_7_fu_1386_p2[0:0] === 1'b1) ? store_7_V_0_reg_593 : store_7_V_fu_1392_p2);

assign store_7_V_fu_1392_p2 = (store_7_V_0_reg_593 + 9'd1);

assign store_8_V_1_fu_1425_p3 = ((xor_ln879_8_fu_1413_p2[0:0] === 1'b1) ? store_8_V_0_reg_581 : store_8_V_fu_1419_p2);

assign store_8_V_fu_1419_p2 = (store_8_V_0_reg_581 + 9'd1);

assign store_9_V_1_fu_1452_p3 = ((xor_ln879_9_fu_1440_p2[0:0] === 1'b1) ? store_9_V_0_reg_569 : store_9_V_fu_1446_p2);

assign store_9_V_fu_1446_p2 = (store_9_V_0_reg_569 + 9'd1);

assign t_fu_824_p2 = (t_0_reg_294 + 4'd1);

assign tmp_2_fu_2084_p33 = w_0_reg_701[4:0];

assign trunc_ln67_fu_836_p1 = t_0_reg_294[2:0];

assign u_fu_1168_p2 = (ap_phi_mux_u_0_phi_fu_693_p4 + 9'd1);

assign w_fu_2060_p2 = (w_0_reg_701 + 6'd1);

assign weight_input_V_V_0_ack_in = weight_input_V_V_0_state[1'd1];

assign weight_input_V_V_0_load_A = (weight_input_V_V_0_state_cmp_full & ~weight_input_V_V_0_sel_wr);

assign weight_input_V_V_0_load_B = (weight_input_V_V_0_state_cmp_full & weight_input_V_V_0_sel_wr);

assign weight_input_V_V_0_sel = weight_input_V_V_0_sel_rd;

assign weight_input_V_V_0_state_cmp_full = ((weight_input_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign weight_input_V_V_0_vld_in = weight_input_V_V_TVALID;

assign weight_input_V_V_0_vld_out = weight_input_V_V_0_state[1'd0];

assign weight_input_V_V_TREADY = weight_input_V_V_0_state[1'd1];

assign xor_ln879_10_fu_1467_p2 = (p_Result_4_s_fu_1460_p3 ^ input_data_V_q1);

assign xor_ln879_11_fu_1494_p2 = (p_Result_4_10_fu_1487_p3 ^ input_data_V_q1);

assign xor_ln879_12_fu_1521_p2 = (p_Result_4_11_fu_1514_p3 ^ input_data_V_q1);

assign xor_ln879_13_fu_1548_p2 = (p_Result_4_12_fu_1541_p3 ^ input_data_V_q1);

assign xor_ln879_14_fu_1575_p2 = (p_Result_4_13_fu_1568_p3 ^ input_data_V_q1);

assign xor_ln879_15_fu_1602_p2 = (p_Result_4_14_fu_1595_p3 ^ input_data_V_q1);

assign xor_ln879_16_fu_1629_p2 = (p_Result_4_15_fu_1622_p3 ^ input_data_V_q1);

assign xor_ln879_17_fu_1656_p2 = (p_Result_4_16_fu_1649_p3 ^ input_data_V_q1);

assign xor_ln879_18_fu_1683_p2 = (p_Result_4_17_fu_1676_p3 ^ input_data_V_q1);

assign xor_ln879_19_fu_1710_p2 = (p_Result_4_18_fu_1703_p3 ^ input_data_V_q1);

assign xor_ln879_1_fu_1224_p2 = (p_Result_4_1_fu_1217_p3 ^ input_data_V_q1);

assign xor_ln879_20_fu_1737_p2 = (p_Result_4_19_fu_1730_p3 ^ input_data_V_q1);

assign xor_ln879_21_fu_1764_p2 = (p_Result_4_20_fu_1757_p3 ^ input_data_V_q1);

assign xor_ln879_22_fu_1791_p2 = (p_Result_4_21_fu_1784_p3 ^ input_data_V_q1);

assign xor_ln879_23_fu_1818_p2 = (p_Result_4_22_fu_1811_p3 ^ input_data_V_q1);

assign xor_ln879_24_fu_1845_p2 = (p_Result_4_23_fu_1838_p3 ^ input_data_V_q1);

assign xor_ln879_25_fu_1872_p2 = (p_Result_4_24_fu_1865_p3 ^ input_data_V_q1);

assign xor_ln879_26_fu_1899_p2 = (p_Result_4_25_fu_1892_p3 ^ input_data_V_q1);

assign xor_ln879_27_fu_1926_p2 = (p_Result_4_26_fu_1919_p3 ^ input_data_V_q1);

assign xor_ln879_28_fu_1953_p2 = (p_Result_4_27_fu_1946_p3 ^ input_data_V_q1);

assign xor_ln879_29_fu_1980_p2 = (p_Result_4_28_fu_1973_p3 ^ input_data_V_q1);

assign xor_ln879_2_fu_1251_p2 = (p_Result_4_2_fu_1244_p3 ^ input_data_V_q1);

assign xor_ln879_30_fu_2007_p2 = (p_Result_4_29_fu_2000_p3 ^ input_data_V_q1);

assign xor_ln879_31_fu_2034_p2 = (p_Result_4_30_fu_2027_p3 ^ input_data_V_q1);

assign xor_ln879_3_fu_1278_p2 = (p_Result_4_3_fu_1271_p3 ^ input_data_V_q1);

assign xor_ln879_4_fu_1305_p2 = (p_Result_4_4_fu_1298_p3 ^ input_data_V_q1);

assign xor_ln879_5_fu_1332_p2 = (p_Result_4_5_fu_1325_p3 ^ input_data_V_q1);

assign xor_ln879_6_fu_1359_p2 = (p_Result_4_6_fu_1352_p3 ^ input_data_V_q1);

assign xor_ln879_7_fu_1386_p2 = (p_Result_4_7_fu_1379_p3 ^ input_data_V_q1);

assign xor_ln879_8_fu_1413_p2 = (p_Result_4_8_fu_1406_p3 ^ input_data_V_q1);

assign xor_ln879_9_fu_1440_p2 = (p_Result_4_9_fu_1433_p3 ^ input_data_V_q1);

assign xor_ln879_fu_1197_p2 = (p_Result_4_fu_1190_p3 ^ input_data_V_q1);

assign zext_ln22_fu_732_p1 = bvh_d_index_reg_272;

assign zext_ln24_fu_748_p1 = j64_fu_728_p1;

assign zext_ln31_fu_763_p1 = i_0_reg_260;

assign zext_ln36_fu_808_p1 = n_0_reg_283;

assign zext_ln61_fu_1174_p1 = ap_phi_mux_u_0_phi_fu_693_p4;

assign zext_ln67_10_fu_938_p1 = or_ln67_8_fu_932_p2;

assign zext_ln67_11_fu_948_p1 = or_ln67_9_fu_942_p2;

assign zext_ln67_12_fu_958_p1 = or_ln67_10_fu_952_p2;

assign zext_ln67_13_fu_968_p1 = or_ln67_11_fu_962_p2;

assign zext_ln67_14_fu_978_p1 = or_ln67_12_fu_972_p2;

assign zext_ln67_15_fu_988_p1 = or_ln67_13_fu_982_p2;

assign zext_ln67_16_fu_998_p1 = or_ln67_14_fu_992_p2;

assign zext_ln67_17_fu_1008_p1 = or_ln67_15_fu_1002_p2;

assign zext_ln67_18_fu_1018_p1 = or_ln67_16_fu_1012_p2;

assign zext_ln67_19_fu_1028_p1 = or_ln67_17_fu_1022_p2;

assign zext_ln67_1_fu_848_p1 = shl_ln_fu_840_p3;

assign zext_ln67_20_fu_1038_p1 = or_ln67_18_fu_1032_p2;

assign zext_ln67_21_fu_1048_p1 = or_ln67_19_fu_1042_p2;

assign zext_ln67_22_fu_1058_p1 = or_ln67_20_fu_1052_p2;

assign zext_ln67_23_fu_1068_p1 = or_ln67_21_fu_1062_p2;

assign zext_ln67_24_fu_1078_p1 = or_ln67_22_fu_1072_p2;

assign zext_ln67_25_fu_1088_p1 = or_ln67_23_fu_1082_p2;

assign zext_ln67_26_fu_1098_p1 = or_ln67_24_fu_1092_p2;

assign zext_ln67_27_fu_1108_p1 = or_ln67_25_fu_1102_p2;

assign zext_ln67_28_fu_1118_p1 = or_ln67_26_fu_1112_p2;

assign zext_ln67_29_fu_1128_p1 = or_ln67_27_fu_1122_p2;

assign zext_ln67_2_fu_858_p1 = or_ln67_fu_852_p2;

assign zext_ln67_30_fu_1138_p1 = or_ln67_28_fu_1132_p2;

assign zext_ln67_31_fu_1148_p1 = or_ln67_29_fu_1142_p2;

assign zext_ln67_32_fu_1158_p1 = or_ln67_30_fu_1152_p2;

assign zext_ln67_3_fu_868_p1 = or_ln67_1_fu_862_p2;

assign zext_ln67_4_fu_878_p1 = or_ln67_2_fu_872_p2;

assign zext_ln67_5_fu_888_p1 = or_ln67_3_fu_882_p2;

assign zext_ln67_6_fu_898_p1 = or_ln67_4_fu_892_p2;

assign zext_ln67_7_fu_908_p1 = or_ln67_5_fu_902_p2;

assign zext_ln67_8_fu_918_p1 = or_ln67_6_fu_912_p2;

assign zext_ln67_9_fu_928_p1 = or_ln67_7_fu_922_p2;

assign zext_ln67_fu_1184_p1 = u_0_reg_689;

assign zext_ln74_fu_2066_p1 = w_0_reg_701;

assign zext_ln77_fu_2075_p1 = add_ln77_fu_2070_p2;

always @ (posedge ap_clk) begin
    zext_ln22_reg_2183[31:9] <= 23'b00000000000000000000000;
    zext_ln24_reg_2196[31:6] <= 26'b00000000000000000000000000;
    shl_ln_reg_2225[4:0] <= 5'b00000;
    zext_ln67_1_reg_2230[4:0] <= 5'b00000;
    zext_ln67_1_reg_2230[31:8] <= 24'b000000000000000000000000;
    zext_ln67_2_reg_2235[4:0] <= 5'b00001;
    zext_ln67_2_reg_2235[31:8] <= 24'b000000000000000000000000;
    zext_ln67_3_reg_2240[4:0] <= 5'b00010;
    zext_ln67_3_reg_2240[31:8] <= 24'b000000000000000000000000;
    zext_ln67_4_reg_2245[4:0] <= 5'b00011;
    zext_ln67_4_reg_2245[31:8] <= 24'b000000000000000000000000;
    zext_ln67_5_reg_2250[4:0] <= 5'b00100;
    zext_ln67_5_reg_2250[31:8] <= 24'b000000000000000000000000;
    zext_ln67_6_reg_2255[4:0] <= 5'b00101;
    zext_ln67_6_reg_2255[31:8] <= 24'b000000000000000000000000;
    zext_ln67_7_reg_2260[4:0] <= 5'b00110;
    zext_ln67_7_reg_2260[31:8] <= 24'b000000000000000000000000;
    zext_ln67_8_reg_2265[4:0] <= 5'b00111;
    zext_ln67_8_reg_2265[31:8] <= 24'b000000000000000000000000;
    zext_ln67_9_reg_2270[4:0] <= 5'b01000;
    zext_ln67_9_reg_2270[31:8] <= 24'b000000000000000000000000;
    zext_ln67_10_reg_2275[4:0] <= 5'b01001;
    zext_ln67_10_reg_2275[31:8] <= 24'b000000000000000000000000;
    zext_ln67_11_reg_2280[4:0] <= 5'b01010;
    zext_ln67_11_reg_2280[31:8] <= 24'b000000000000000000000000;
    zext_ln67_12_reg_2285[4:0] <= 5'b01011;
    zext_ln67_12_reg_2285[31:8] <= 24'b000000000000000000000000;
    zext_ln67_13_reg_2290[4:0] <= 5'b01100;
    zext_ln67_13_reg_2290[31:8] <= 24'b000000000000000000000000;
    zext_ln67_14_reg_2295[4:0] <= 5'b01101;
    zext_ln67_14_reg_2295[31:8] <= 24'b000000000000000000000000;
    zext_ln67_15_reg_2300[4:0] <= 5'b01110;
    zext_ln67_15_reg_2300[31:8] <= 24'b000000000000000000000000;
    zext_ln67_16_reg_2305[4:0] <= 5'b01111;
    zext_ln67_16_reg_2305[31:8] <= 24'b000000000000000000000000;
    zext_ln67_17_reg_2310[4:0] <= 5'b10000;
    zext_ln67_17_reg_2310[31:8] <= 24'b000000000000000000000000;
    zext_ln67_18_reg_2315[4:0] <= 5'b10001;
    zext_ln67_18_reg_2315[31:8] <= 24'b000000000000000000000000;
    zext_ln67_19_reg_2320[4:0] <= 5'b10010;
    zext_ln67_19_reg_2320[31:8] <= 24'b000000000000000000000000;
    zext_ln67_20_reg_2325[4:0] <= 5'b10011;
    zext_ln67_20_reg_2325[31:8] <= 24'b000000000000000000000000;
    zext_ln67_21_reg_2330[4:0] <= 5'b10100;
    zext_ln67_21_reg_2330[31:8] <= 24'b000000000000000000000000;
    zext_ln67_22_reg_2335[4:0] <= 5'b10101;
    zext_ln67_22_reg_2335[31:8] <= 24'b000000000000000000000000;
    zext_ln67_23_reg_2340[4:0] <= 5'b10110;
    zext_ln67_23_reg_2340[31:8] <= 24'b000000000000000000000000;
    zext_ln67_24_reg_2345[4:0] <= 5'b10111;
    zext_ln67_24_reg_2345[31:8] <= 24'b000000000000000000000000;
    zext_ln67_25_reg_2350[4:0] <= 5'b11000;
    zext_ln67_25_reg_2350[31:8] <= 24'b000000000000000000000000;
    zext_ln67_26_reg_2355[4:0] <= 5'b11001;
    zext_ln67_26_reg_2355[31:8] <= 24'b000000000000000000000000;
    zext_ln67_27_reg_2360[4:0] <= 5'b11010;
    zext_ln67_27_reg_2360[31:8] <= 24'b000000000000000000000000;
    zext_ln67_28_reg_2365[4:0] <= 5'b11011;
    zext_ln67_28_reg_2365[31:8] <= 24'b000000000000000000000000;
    zext_ln67_29_reg_2370[4:0] <= 5'b11100;
    zext_ln67_29_reg_2370[31:8] <= 24'b000000000000000000000000;
    zext_ln67_30_reg_2375[4:0] <= 5'b11101;
    zext_ln67_30_reg_2375[31:8] <= 24'b000000000000000000000000;
    zext_ln67_31_reg_2380[4:0] <= 5'b11110;
    zext_ln67_31_reg_2380[31:8] <= 24'b000000000000000000000000;
    zext_ln67_32_reg_2385[4:0] <= 5'b11111;
    zext_ln67_32_reg_2385[31:8] <= 24'b000000000000000000000000;
end

endmodule //fully_connected_layer
