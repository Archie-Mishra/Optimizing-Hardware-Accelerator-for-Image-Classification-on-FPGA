// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="last_fully_connected,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=636,HLS_SYN_LUT=846,HLS_VERSION=2019_1}" *)

module last_fully_connected (
        ap_clk,
        ap_rst_n,
        axi_input_V_V_TDATA,
        axi_input_V_V_TVALID,
        axi_input_V_V_TREADY,
        m_axi_BUS_r_AWVALID,
        m_axi_BUS_r_AWREADY,
        m_axi_BUS_r_AWADDR,
        m_axi_BUS_r_AWID,
        m_axi_BUS_r_AWLEN,
        m_axi_BUS_r_AWSIZE,
        m_axi_BUS_r_AWBURST,
        m_axi_BUS_r_AWLOCK,
        m_axi_BUS_r_AWCACHE,
        m_axi_BUS_r_AWPROT,
        m_axi_BUS_r_AWQOS,
        m_axi_BUS_r_AWREGION,
        m_axi_BUS_r_AWUSER,
        m_axi_BUS_r_WVALID,
        m_axi_BUS_r_WREADY,
        m_axi_BUS_r_WDATA,
        m_axi_BUS_r_WSTRB,
        m_axi_BUS_r_WLAST,
        m_axi_BUS_r_WID,
        m_axi_BUS_r_WUSER,
        m_axi_BUS_r_ARVALID,
        m_axi_BUS_r_ARREADY,
        m_axi_BUS_r_ARADDR,
        m_axi_BUS_r_ARID,
        m_axi_BUS_r_ARLEN,
        m_axi_BUS_r_ARSIZE,
        m_axi_BUS_r_ARBURST,
        m_axi_BUS_r_ARLOCK,
        m_axi_BUS_r_ARCACHE,
        m_axi_BUS_r_ARPROT,
        m_axi_BUS_r_ARQOS,
        m_axi_BUS_r_ARREGION,
        m_axi_BUS_r_ARUSER,
        m_axi_BUS_r_RVALID,
        m_axi_BUS_r_RREADY,
        m_axi_BUS_r_RDATA,
        m_axi_BUS_r_RLAST,
        m_axi_BUS_r_RID,
        m_axi_BUS_r_RUSER,
        m_axi_BUS_r_RRESP,
        m_axi_BUS_r_BVALID,
        m_axi_BUS_r_BREADY,
        m_axi_BUS_r_BRESP,
        m_axi_BUS_r_BID,
        m_axi_BUS_r_BUSER,
        s_axi_BUS_AWVALID,
        s_axi_BUS_AWREADY,
        s_axi_BUS_AWADDR,
        s_axi_BUS_WVALID,
        s_axi_BUS_WREADY,
        s_axi_BUS_WDATA,
        s_axi_BUS_WSTRB,
        s_axi_BUS_ARVALID,
        s_axi_BUS_ARREADY,
        s_axi_BUS_ARADDR,
        s_axi_BUS_RVALID,
        s_axi_BUS_RREADY,
        s_axi_BUS_RDATA,
        s_axi_BUS_RRESP,
        s_axi_BUS_BVALID,
        s_axi_BUS_BREADY,
        s_axi_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_state7 = 9'd16;
parameter    ap_ST_fsm_state8 = 9'd32;
parameter    ap_ST_fsm_state9 = 9'd64;
parameter    ap_ST_fsm_state10 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;
parameter    C_S_AXI_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS_R_ID_WIDTH = 1;
parameter    C_M_AXI_BUS_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_BUS_R_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_TARGET_ADDR = 0;
parameter    C_M_AXI_BUS_R_USER_VALUE = 0;
parameter    C_M_AXI_BUS_R_PROT_VALUE = 0;
parameter    C_M_AXI_BUS_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUS_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] axi_input_V_V_TDATA;
input   axi_input_V_V_TVALID;
output   axi_input_V_V_TREADY;
output   m_axi_BUS_r_AWVALID;
input   m_axi_BUS_r_AWREADY;
output  [C_M_AXI_BUS_R_ADDR_WIDTH - 1:0] m_axi_BUS_r_AWADDR;
output  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_BUS_r_AWID;
output  [7:0] m_axi_BUS_r_AWLEN;
output  [2:0] m_axi_BUS_r_AWSIZE;
output  [1:0] m_axi_BUS_r_AWBURST;
output  [1:0] m_axi_BUS_r_AWLOCK;
output  [3:0] m_axi_BUS_r_AWCACHE;
output  [2:0] m_axi_BUS_r_AWPROT;
output  [3:0] m_axi_BUS_r_AWQOS;
output  [3:0] m_axi_BUS_r_AWREGION;
output  [C_M_AXI_BUS_R_AWUSER_WIDTH - 1:0] m_axi_BUS_r_AWUSER;
output   m_axi_BUS_r_WVALID;
input   m_axi_BUS_r_WREADY;
output  [C_M_AXI_BUS_R_DATA_WIDTH - 1:0] m_axi_BUS_r_WDATA;
output  [C_M_AXI_BUS_R_WSTRB_WIDTH - 1:0] m_axi_BUS_r_WSTRB;
output   m_axi_BUS_r_WLAST;
output  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_BUS_r_WID;
output  [C_M_AXI_BUS_R_WUSER_WIDTH - 1:0] m_axi_BUS_r_WUSER;
output   m_axi_BUS_r_ARVALID;
input   m_axi_BUS_r_ARREADY;
output  [C_M_AXI_BUS_R_ADDR_WIDTH - 1:0] m_axi_BUS_r_ARADDR;
output  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_BUS_r_ARID;
output  [7:0] m_axi_BUS_r_ARLEN;
output  [2:0] m_axi_BUS_r_ARSIZE;
output  [1:0] m_axi_BUS_r_ARBURST;
output  [1:0] m_axi_BUS_r_ARLOCK;
output  [3:0] m_axi_BUS_r_ARCACHE;
output  [2:0] m_axi_BUS_r_ARPROT;
output  [3:0] m_axi_BUS_r_ARQOS;
output  [3:0] m_axi_BUS_r_ARREGION;
output  [C_M_AXI_BUS_R_ARUSER_WIDTH - 1:0] m_axi_BUS_r_ARUSER;
input   m_axi_BUS_r_RVALID;
output   m_axi_BUS_r_RREADY;
input  [C_M_AXI_BUS_R_DATA_WIDTH - 1:0] m_axi_BUS_r_RDATA;
input   m_axi_BUS_r_RLAST;
input  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_BUS_r_RID;
input  [C_M_AXI_BUS_R_RUSER_WIDTH - 1:0] m_axi_BUS_r_RUSER;
input  [1:0] m_axi_BUS_r_RRESP;
input   m_axi_BUS_r_BVALID;
output   m_axi_BUS_r_BREADY;
input  [1:0] m_axi_BUS_r_BRESP;
input  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_BUS_r_BID;
input  [C_M_AXI_BUS_R_BUSER_WIDTH - 1:0] m_axi_BUS_r_BUSER;
input   s_axi_BUS_AWVALID;
output   s_axi_BUS_AWREADY;
input  [C_S_AXI_BUS_ADDR_WIDTH - 1:0] s_axi_BUS_AWADDR;
input   s_axi_BUS_WVALID;
output   s_axi_BUS_WREADY;
input  [C_S_AXI_BUS_DATA_WIDTH - 1:0] s_axi_BUS_WDATA;
input  [C_S_AXI_BUS_WSTRB_WIDTH - 1:0] s_axi_BUS_WSTRB;
input   s_axi_BUS_ARVALID;
output   s_axi_BUS_ARREADY;
input  [C_S_AXI_BUS_ADDR_WIDTH - 1:0] s_axi_BUS_ARADDR;
output   s_axi_BUS_RVALID;
input   s_axi_BUS_RREADY;
output  [C_S_AXI_BUS_DATA_WIDTH - 1:0] s_axi_BUS_RDATA;
output  [1:0] s_axi_BUS_RRESP;
output   s_axi_BUS_BVALID;
input   s_axi_BUS_BREADY;
output  [1:0] s_axi_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [15:0] axi_input_V_V_0_data_out;
wire    axi_input_V_V_0_vld_in;
wire    axi_input_V_V_0_vld_out;
wire    axi_input_V_V_0_ack_in;
reg    axi_input_V_V_0_ack_out;
reg   [15:0] axi_input_V_V_0_payload_A;
reg   [15:0] axi_input_V_V_0_payload_B;
reg    axi_input_V_V_0_sel_rd;
reg    axi_input_V_V_0_sel_wr;
wire    axi_input_V_V_0_sel;
wire    axi_input_V_V_0_load_A;
wire    axi_input_V_V_0_load_B;
reg   [1:0] axi_input_V_V_0_state;
wire    axi_input_V_V_0_state_cmp_full;
reg   [3:0] store_V_address0;
reg    store_V_ce0;
reg    store_V_we0;
wire   [9:0] store_V_d0;
wire   [9:0] store_V_q0;
reg    axi_input_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_139_p2;
reg    BUS_r_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    BUS_r_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln20_reg_190;
reg   [0:0] icmp_ln20_reg_190_pp1_iter1_reg;
reg    BUS_r_blk_n_B;
wire    ap_CS_fsm_state11;
reg    BUS_r_AWVALID;
wire    BUS_r_AWREADY;
reg    BUS_r_WVALID;
wire    BUS_r_WREADY;
wire   [31:0] BUS_r_WDATA;
wire    BUS_r_ARREADY;
wire    BUS_r_RVALID;
wire   [31:0] BUS_r_RDATA;
wire    BUS_r_RLAST;
wire   [0:0] BUS_r_RID;
wire   [0:0] BUS_r_RUSER;
wire   [1:0] BUS_r_RRESP;
wire    BUS_r_BVALID;
reg    BUS_r_BREADY;
wire   [1:0] BUS_r_BRESP;
wire   [0:0] BUS_r_BID;
wire   [0:0] BUS_r_BUSER;
reg   [3:0] phi_ln20_reg_128;
wire   [3:0] i_fu_145_p2;
reg    ap_block_state2;
wire   [0:0] icmp_ln20_fu_161_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_state6_pp1_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] add_ln20_fu_167_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [9:0] store_V_load_reg_204;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg   [3:0] i_0_reg_117;
wire   [63:0] zext_ln17_fu_156_p1;
wire   [63:0] zext_ln20_fu_173_p1;
wire    ap_block_pp1_stage0_01001;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 axi_input_V_V_0_sel_rd = 1'b0;
#0 axi_input_V_V_0_sel_wr = 1'b0;
#0 axi_input_V_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

last_fully_connecbkb #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
store_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(store_V_address0),
    .ce0(store_V_ce0),
    .we0(store_V_we0),
    .d0(store_V_d0),
    .q0(store_V_q0)
);

last_fully_connected_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_DATA_WIDTH ))
last_fully_connected_BUS_s_axi_U(
    .AWVALID(s_axi_BUS_AWVALID),
    .AWREADY(s_axi_BUS_AWREADY),
    .AWADDR(s_axi_BUS_AWADDR),
    .WVALID(s_axi_BUS_WVALID),
    .WREADY(s_axi_BUS_WREADY),
    .WDATA(s_axi_BUS_WDATA),
    .WSTRB(s_axi_BUS_WSTRB),
    .ARVALID(s_axi_BUS_ARVALID),
    .ARREADY(s_axi_BUS_ARREADY),
    .ARADDR(s_axi_BUS_ARADDR),
    .RVALID(s_axi_BUS_RVALID),
    .RREADY(s_axi_BUS_RREADY),
    .RDATA(s_axi_BUS_RDATA),
    .RRESP(s_axi_BUS_RRESP),
    .BVALID(s_axi_BUS_BVALID),
    .BREADY(s_axi_BUS_BREADY),
    .BRESP(s_axi_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

last_fully_connected_BUS_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUS_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUS_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUS_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUS_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUS_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUS_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUS_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUS_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BUS_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BUS_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUS_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUS_R_CACHE_VALUE ))
last_fully_connected_BUS_r_m_axi_U(
    .AWVALID(m_axi_BUS_r_AWVALID),
    .AWREADY(m_axi_BUS_r_AWREADY),
    .AWADDR(m_axi_BUS_r_AWADDR),
    .AWID(m_axi_BUS_r_AWID),
    .AWLEN(m_axi_BUS_r_AWLEN),
    .AWSIZE(m_axi_BUS_r_AWSIZE),
    .AWBURST(m_axi_BUS_r_AWBURST),
    .AWLOCK(m_axi_BUS_r_AWLOCK),
    .AWCACHE(m_axi_BUS_r_AWCACHE),
    .AWPROT(m_axi_BUS_r_AWPROT),
    .AWQOS(m_axi_BUS_r_AWQOS),
    .AWREGION(m_axi_BUS_r_AWREGION),
    .AWUSER(m_axi_BUS_r_AWUSER),
    .WVALID(m_axi_BUS_r_WVALID),
    .WREADY(m_axi_BUS_r_WREADY),
    .WDATA(m_axi_BUS_r_WDATA),
    .WSTRB(m_axi_BUS_r_WSTRB),
    .WLAST(m_axi_BUS_r_WLAST),
    .WID(m_axi_BUS_r_WID),
    .WUSER(m_axi_BUS_r_WUSER),
    .ARVALID(m_axi_BUS_r_ARVALID),
    .ARREADY(m_axi_BUS_r_ARREADY),
    .ARADDR(m_axi_BUS_r_ARADDR),
    .ARID(m_axi_BUS_r_ARID),
    .ARLEN(m_axi_BUS_r_ARLEN),
    .ARSIZE(m_axi_BUS_r_ARSIZE),
    .ARBURST(m_axi_BUS_r_ARBURST),
    .ARLOCK(m_axi_BUS_r_ARLOCK),
    .ARCACHE(m_axi_BUS_r_ARCACHE),
    .ARPROT(m_axi_BUS_r_ARPROT),
    .ARQOS(m_axi_BUS_r_ARQOS),
    .ARREGION(m_axi_BUS_r_ARREGION),
    .ARUSER(m_axi_BUS_r_ARUSER),
    .RVALID(m_axi_BUS_r_RVALID),
    .RREADY(m_axi_BUS_r_RREADY),
    .RDATA(m_axi_BUS_r_RDATA),
    .RLAST(m_axi_BUS_r_RLAST),
    .RID(m_axi_BUS_r_RID),
    .RUSER(m_axi_BUS_r_RUSER),
    .RRESP(m_axi_BUS_r_RRESP),
    .BVALID(m_axi_BUS_r_BVALID),
    .BREADY(m_axi_BUS_r_BREADY),
    .BRESP(m_axi_BUS_r_BRESP),
    .BID(m_axi_BUS_r_BID),
    .BUSER(m_axi_BUS_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(BUS_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(BUS_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(BUS_r_RDATA),
    .I_RID(BUS_r_RID),
    .I_RUSER(BUS_r_RUSER),
    .I_RRESP(BUS_r_RRESP),
    .I_RLAST(BUS_r_RLAST),
    .I_AWVALID(BUS_r_AWVALID),
    .I_AWREADY(BUS_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd10),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(BUS_r_WVALID),
    .I_WREADY(BUS_r_WREADY),
    .I_WDATA(BUS_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(BUS_r_BVALID),
    .I_BREADY(BUS_r_BREADY),
    .I_BRESP(BUS_r_BRESP),
    .I_BID(BUS_r_BID),
    .I_BUSER(BUS_r_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == BUS_r_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == BUS_r_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axi_input_V_V_0_ack_out == 1'b1) & (axi_input_V_V_0_vld_out == 1'b1))) begin
            axi_input_V_V_0_sel_rd <= ~axi_input_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axi_input_V_V_0_ack_in == 1'b1) & (axi_input_V_V_0_vld_in == 1'b1))) begin
            axi_input_V_V_0_sel_wr <= ~axi_input_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_state <= 2'd0;
    end else begin
        if ((((axi_input_V_V_0_state == 2'd2) & (axi_input_V_V_0_vld_in == 1'b0)) | ((axi_input_V_V_0_state == 2'd3) & (axi_input_V_V_0_vld_in == 1'b0) & (axi_input_V_V_0_ack_out == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd2;
        end else if ((((axi_input_V_V_0_state == 2'd1) & (axi_input_V_V_0_ack_out == 1'b0)) | ((axi_input_V_V_0_state == 2'd3) & (axi_input_V_V_0_ack_out == 1'b0) & (axi_input_V_V_0_vld_in == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd1;
        end else if (((~((axi_input_V_V_0_vld_in == 1'b0) & (axi_input_V_V_0_ack_out == 1'b1)) & ~((axi_input_V_V_0_ack_out == 1'b0) & (axi_input_V_V_0_vld_in == 1'b1)) & (axi_input_V_V_0_state == 2'd3)) | ((axi_input_V_V_0_state == 2'd1) & (axi_input_V_V_0_ack_out == 1'b1)) | ((axi_input_V_V_0_state == 2'd2) & (axi_input_V_V_0_vld_in == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd3;
        end else begin
            axi_input_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln13_fu_139_p2 == 1'd0) & (axi_input_V_V_0_vld_out == 1'b0)) & (icmp_ln13_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_117 <= i_fu_145_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_117 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == BUS_r_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln20_reg_128 <= 4'd0;
    end else if (((icmp_ln20_fu_161_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln20_reg_128 <= add_ln20_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_input_V_V_0_load_A == 1'b1)) begin
        axi_input_V_V_0_payload_A <= axi_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_input_V_V_0_load_B == 1'b1)) begin
        axi_input_V_V_0_payload_B <= axi_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln20_reg_190 <= icmp_ln20_fu_161_p2;
        icmp_ln20_reg_190_pp1_iter1_reg <= icmp_ln20_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_190 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        store_V_load_reg_204 <= store_V_q0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_r_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
        BUS_r_AWVALID = 1'b1;
    end else begin
        BUS_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_r_BVALID) & (1'b1 == ap_CS_fsm_state11))) begin
        BUS_r_BREADY = 1'b1;
    end else begin
        BUS_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_190_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        BUS_r_WVALID = 1'b1;
    end else begin
        BUS_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUS_r_blk_n_AW = m_axi_BUS_r_AWREADY;
    end else begin
        BUS_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        BUS_r_blk_n_B = m_axi_BUS_r_BVALID;
    end else begin
        BUS_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_190_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        BUS_r_blk_n_W = m_axi_BUS_r_WREADY;
    end else begin
        BUS_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_161_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_r_BVALID) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUS_r_BVALID) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln13_fu_139_p2 == 1'd0) & (axi_input_V_V_0_vld_out == 1'b0)) & (icmp_ln13_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_input_V_V_0_ack_out = 1'b1;
    end else begin
        axi_input_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axi_input_V_V_0_sel == 1'b1)) begin
        axi_input_V_V_0_data_out = axi_input_V_V_0_payload_B;
    end else begin
        axi_input_V_V_0_data_out = axi_input_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_input_V_V_TDATA_blk_n = axi_input_V_V_0_state[1'd0];
    end else begin
        axi_input_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        store_V_address0 = zext_ln20_fu_173_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        store_V_address0 = zext_ln17_fu_156_p1;
    end else begin
        store_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((icmp_ln13_fu_139_p2 == 1'd0) & (axi_input_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        store_V_ce0 = 1'b1;
    end else begin
        store_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln13_fu_139_p2 == 1'd0) & (axi_input_V_V_0_vld_out == 1'b0)) & (icmp_ln13_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        store_V_we0 = 1'b1;
    end else begin
        store_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln13_fu_139_p2 == 1'd0) & (axi_input_V_V_0_vld_out == 1'b0)) & (icmp_ln13_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln13_fu_139_p2 == 1'd0) & (axi_input_V_V_0_vld_out == 1'b0)) & (icmp_ln13_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == BUS_r_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln20_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln20_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == BUS_r_BVALID) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BUS_r_WDATA = store_V_load_reg_204;

assign add_ln20_fu_167_p2 = (phi_ln20_reg_128 + 4'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln13_fu_139_p2 == 1'd0) & (axi_input_V_V_0_vld_out == 1'b0));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln20_reg_190_pp1_iter1_reg == 1'd0) & (1'b0 == BUS_r_WREADY));
end

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axi_input_V_V_0_ack_in = axi_input_V_V_0_state[1'd1];

assign axi_input_V_V_0_load_A = (~axi_input_V_V_0_sel_wr & axi_input_V_V_0_state_cmp_full);

assign axi_input_V_V_0_load_B = (axi_input_V_V_0_state_cmp_full & axi_input_V_V_0_sel_wr);

assign axi_input_V_V_0_sel = axi_input_V_V_0_sel_rd;

assign axi_input_V_V_0_state_cmp_full = ((axi_input_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axi_input_V_V_0_vld_in = axi_input_V_V_TVALID;

assign axi_input_V_V_0_vld_out = axi_input_V_V_0_state[1'd0];

assign axi_input_V_V_TREADY = axi_input_V_V_0_state[1'd1];

assign i_fu_145_p2 = (i_0_reg_117 + 4'd1);

assign icmp_ln13_fu_139_p2 = ((i_0_reg_117 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_161_p2 = ((phi_ln20_reg_128 == 4'd10) ? 1'b1 : 1'b0);

assign store_V_d0 = axi_input_V_V_0_data_out[9:0];

assign zext_ln17_fu_156_p1 = i_0_reg_117;

assign zext_ln20_fu_173_p1 = phi_ln20_reg_128;

endmodule //last_fully_connected
