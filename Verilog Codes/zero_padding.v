// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="zero_padding,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.963500,HLS_SYN_LAT=8714,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=205,HLS_SYN_LUT=378,HLS_VERSION=2019_1}" *)

module zero_padding (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        axi_input_V_V_TDATA,
        axi_input_V_V_TVALID,
        axi_input_V_V_TREADY,
        axi_output_V_V_TDATA,
        axi_output_V_V_TVALID,
        axi_output_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] axi_input_V_V_TDATA;
input   axi_input_V_V_TVALID;
output   axi_input_V_V_TREADY;
output  [31:0] axi_output_V_V_TDATA;
output   axi_output_V_V_TVALID;
input   axi_output_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] axi_input_V_V_0_data_out;
wire    axi_input_V_V_0_vld_in;
wire    axi_input_V_V_0_vld_out;
wire    axi_input_V_V_0_ack_in;
reg    axi_input_V_V_0_ack_out;
reg   [31:0] axi_input_V_V_0_payload_A;
reg   [31:0] axi_input_V_V_0_payload_B;
reg    axi_input_V_V_0_sel_rd;
reg    axi_input_V_V_0_sel_wr;
wire    axi_input_V_V_0_sel;
wire    axi_input_V_V_0_load_A;
wire    axi_input_V_V_0_load_B;
reg   [1:0] axi_input_V_V_0_state;
wire    axi_input_V_V_0_state_cmp_full;
reg   [31:0] axi_output_V_V_1_data_in;
reg   [31:0] axi_output_V_V_1_data_out;
reg    axi_output_V_V_1_vld_in;
wire    axi_output_V_V_1_vld_out;
wire    axi_output_V_V_1_ack_in;
wire    axi_output_V_V_1_ack_out;
reg   [31:0] axi_output_V_V_1_payload_A;
reg   [31:0] axi_output_V_V_1_payload_B;
reg    axi_output_V_V_1_sel_rd;
reg    axi_output_V_V_1_sel_wr;
wire    axi_output_V_V_1_sel;
wire    axi_output_V_V_1_load_A;
wire    axi_output_V_V_1_load_B;
reg   [1:0] axi_output_V_V_1_state;
wire    axi_output_V_V_1_state_cmp_full;
reg    axi_input_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln8_reg_215;
reg   [0:0] and_ln12_2_reg_234;
reg    axi_output_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [12:0] indvar_flatten_reg_69;
reg   [6:0] r_0_reg_80;
reg   [6:0] c_0_reg_91;
wire   [0:0] icmp_ln8_fu_120_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] add_ln8_fu_126_p2;
reg   [12:0] add_ln8_reg_219;
wire   [6:0] select_ln12_fu_138_p3;
reg   [6:0] select_ln12_reg_224;
wire   [6:0] select_ln8_fu_178_p3;
reg   [6:0] select_ln8_reg_229;
wire   [0:0] and_ln12_2_fu_204_p2;
reg    ap_predicate_op35_read_state3;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_predicate_op34_write_state3;
reg    ap_predicate_op36_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage1_11001;
wire   [6:0] c_fu_210_p2;
reg   [6:0] c_reg_243;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [12:0] ap_phi_mux_indvar_flatten_phi_fu_73_p4;
reg   [6:0] ap_phi_mux_r_0_phi_fu_84_p4;
reg   [6:0] ap_phi_mux_c_0_phi_fu_95_p4;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln12_fu_102_p2;
wire   [0:0] icmp_ln12_1_fu_108_p2;
wire   [0:0] icmp_ln9_fu_132_p2;
wire   [6:0] add_ln8_1_fu_146_p2;
wire   [0:0] icmp_ln12_4_fu_152_p2;
wire   [0:0] icmp_ln12_5_fu_158_p2;
wire   [0:0] and_ln12_3_fu_164_p2;
wire   [0:0] and_ln12_fu_114_p2;
wire   [0:0] icmp_ln12_2_fu_186_p2;
wire   [0:0] icmp_ln12_3_fu_192_p2;
wire   [0:0] and_ln12_1_fu_198_p2;
wire   [0:0] select_ln12_1_fu_170_p3;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_279;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 axi_input_V_V_0_sel_rd = 1'b0;
#0 axi_input_V_V_0_sel_wr = 1'b0;
#0 axi_input_V_V_0_state = 2'd0;
#0 axi_output_V_V_1_sel_rd = 1'b0;
#0 axi_output_V_V_1_sel_wr = 1'b0;
#0 axi_output_V_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axi_input_V_V_0_ack_out == 1'b1) & (axi_input_V_V_0_vld_out == 1'b1))) begin
            axi_input_V_V_0_sel_rd <= ~axi_input_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axi_input_V_V_0_ack_in == 1'b1) & (axi_input_V_V_0_vld_in == 1'b1))) begin
            axi_input_V_V_0_sel_wr <= ~axi_input_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_input_V_V_0_state <= 2'd0;
    end else begin
        if ((((axi_input_V_V_0_state == 2'd2) & (axi_input_V_V_0_vld_in == 1'b0)) | ((axi_input_V_V_0_state == 2'd3) & (axi_input_V_V_0_vld_in == 1'b0) & (axi_input_V_V_0_ack_out == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd2;
        end else if ((((axi_input_V_V_0_state == 2'd1) & (axi_input_V_V_0_ack_out == 1'b0)) | ((axi_input_V_V_0_state == 2'd3) & (axi_input_V_V_0_ack_out == 1'b0) & (axi_input_V_V_0_vld_in == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd1;
        end else if (((~((axi_input_V_V_0_vld_in == 1'b0) & (axi_input_V_V_0_ack_out == 1'b1)) & ~((axi_input_V_V_0_ack_out == 1'b0) & (axi_input_V_V_0_vld_in == 1'b1)) & (axi_input_V_V_0_state == 2'd3)) | ((axi_input_V_V_0_state == 2'd1) & (axi_input_V_V_0_ack_out == 1'b1)) | ((axi_input_V_V_0_state == 2'd2) & (axi_input_V_V_0_vld_in == 1'b1)))) begin
            axi_input_V_V_0_state <= 2'd3;
        end else begin
            axi_input_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_output_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axi_output_V_V_1_ack_out == 1'b1) & (axi_output_V_V_1_vld_out == 1'b1))) begin
            axi_output_V_V_1_sel_rd <= ~axi_output_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_output_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axi_output_V_V_1_vld_in == 1'b1) & (axi_output_V_V_1_ack_in == 1'b1))) begin
            axi_output_V_V_1_sel_wr <= ~axi_output_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axi_output_V_V_1_state <= 2'd0;
    end else begin
        if ((((axi_output_V_V_1_state == 2'd2) & (axi_output_V_V_1_vld_in == 1'b0)) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_1_vld_in == 1'b0) & (axi_output_V_V_1_ack_out == 1'b1)))) begin
            axi_output_V_V_1_state <= 2'd2;
        end else if ((((axi_output_V_V_1_state == 2'd1) & (axi_output_V_V_TREADY == 1'b0)) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0) & (axi_output_V_V_1_vld_in == 1'b1)))) begin
            axi_output_V_V_1_state <= 2'd1;
        end else if (((~((axi_output_V_V_1_vld_in == 1'b0) & (axi_output_V_V_1_ack_out == 1'b1)) & ~((axi_output_V_V_TREADY == 1'b0) & (axi_output_V_V_1_vld_in == 1'b1)) & (axi_output_V_V_1_state == 2'd3)) | ((axi_output_V_V_1_state == 2'd1) & (axi_output_V_V_1_ack_out == 1'b1)) | ((axi_output_V_V_1_state == 2'd2) & (axi_output_V_V_1_vld_in == 1'b1)))) begin
            axi_output_V_V_1_state <= 2'd3;
        end else begin
            axi_output_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_215 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_91 <= c_reg_243;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_91 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_215 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_69 <= add_ln8_reg_219;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_69 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_215 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_0_reg_80 <= select_ln8_reg_229;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_80 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln8_reg_219 <= add_ln8_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_120_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln12_2_reg_234 <= and_ln12_2_fu_204_p2;
        select_ln12_reg_224 <= select_ln12_fu_138_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_input_V_V_0_load_A == 1'b1)) begin
        axi_input_V_V_0_payload_A <= axi_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_input_V_V_0_load_B == 1'b1)) begin
        axi_input_V_V_0_payload_B <= axi_input_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_output_V_V_1_load_A == 1'b1)) begin
        axi_output_V_V_1_payload_A <= axi_output_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((axi_output_V_V_1_load_B == 1'b1)) begin
        axi_output_V_V_1_payload_B <= axi_output_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_215 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_reg_243 <= c_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln8_reg_215 <= icmp_ln8_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_120_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln8_reg_229 <= select_ln8_fu_178_p3;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_120_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_95_p4 = c_reg_243;
    end else begin
        ap_phi_mux_c_0_phi_fu_95_p4 = c_0_reg_91;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_73_p4 = add_ln8_reg_219;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_73_p4 = indvar_flatten_reg_69;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_84_p4 = select_ln8_reg_229;
    end else begin
        ap_phi_mux_r_0_phi_fu_84_p4 = r_0_reg_80;
    end
end

always @ (*) begin
    if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op35_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        axi_input_V_V_0_ack_out = 1'b1;
    end else begin
        axi_input_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axi_input_V_V_0_sel == 1'b1)) begin
        axi_input_V_V_0_data_out = axi_input_V_V_0_payload_B;
    end else begin
        axi_input_V_V_0_data_out = axi_input_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln12_2_reg_234) & (icmp_ln8_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        axi_input_V_V_TDATA_blk_n = axi_input_V_V_0_state[1'd0];
    end else begin
        axi_input_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_279)) begin
        if ((ap_predicate_op36_write_state3 == 1'b1)) begin
            axi_output_V_V_1_data_in = axi_input_V_V_0_data_out;
        end else if ((ap_predicate_op34_write_state3 == 1'b1)) begin
            axi_output_V_V_1_data_in = 32'd0;
        end else begin
            axi_output_V_V_1_data_in = 'bx;
        end
    end else begin
        axi_output_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((axi_output_V_V_1_sel == 1'b1)) begin
        axi_output_V_V_1_data_out = axi_output_V_V_1_payload_B;
    end else begin
        axi_output_V_V_1_data_out = axi_output_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op36_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op34_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        axi_output_V_V_1_vld_in = 1'b1;
    end else begin
        axi_output_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln12_2_reg_234) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'd1 == and_ln12_2_reg_234) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'd0 == and_ln12_2_reg_234) & (icmp_ln8_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((1'd1 == and_ln12_2_reg_234) & (icmp_ln8_reg_215 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        axi_output_V_V_TDATA_blk_n = axi_output_V_V_1_state[1'd1];
    end else begin
        axi_output_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln8_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln8_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln8_1_fu_146_p2 = (ap_phi_mux_r_0_phi_fu_84_p4 + 7'd1);

assign add_ln8_fu_126_p2 = (ap_phi_mux_indvar_flatten_phi_fu_73_p4 + 13'd1);

assign and_ln12_1_fu_198_p2 = (icmp_ln12_3_fu_192_p2 & icmp_ln12_2_fu_186_p2);

assign and_ln12_2_fu_204_p2 = (select_ln12_1_fu_170_p3 & and_ln12_1_fu_198_p2);

assign and_ln12_3_fu_164_p2 = (icmp_ln12_5_fu_158_p2 & icmp_ln12_4_fu_152_p2);

assign and_ln12_fu_114_p2 = (icmp_ln12_fu_102_p2 & icmp_ln12_1_fu_108_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((axi_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op35_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((axi_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op35_read_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((axi_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op35_read_state3 == 1'b1))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((axi_output_V_V_1_ack_in == 1'b0) & (ap_predicate_op36_write_state3 == 1'b1)) | ((axi_output_V_V_1_ack_in == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((axi_input_V_V_0_vld_out == 1'b0) & (ap_predicate_op35_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4_io = (((1'd0 == and_ln12_2_reg_234) & (axi_output_V_V_1_ack_in == 1'b0)) | ((1'd1 == and_ln12_2_reg_234) & (axi_output_V_V_1_ack_in == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((axi_output_V_V_1_state == 2'd1) | ((axi_output_V_V_1_state == 2'd3) & (axi_output_V_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_279 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op34_write_state3 = ((1'd0 == and_ln12_2_reg_234) & (icmp_ln8_reg_215 == 1'd0));
end

always @ (*) begin
    ap_predicate_op35_read_state3 = ((1'd1 == and_ln12_2_reg_234) & (icmp_ln8_reg_215 == 1'd0));
end

always @ (*) begin
    ap_predicate_op36_write_state3 = ((1'd1 == and_ln12_2_reg_234) & (icmp_ln8_reg_215 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axi_input_V_V_0_ack_in = axi_input_V_V_0_state[1'd1];

assign axi_input_V_V_0_load_A = (~axi_input_V_V_0_sel_wr & axi_input_V_V_0_state_cmp_full);

assign axi_input_V_V_0_load_B = (axi_input_V_V_0_state_cmp_full & axi_input_V_V_0_sel_wr);

assign axi_input_V_V_0_sel = axi_input_V_V_0_sel_rd;

assign axi_input_V_V_0_state_cmp_full = ((axi_input_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axi_input_V_V_0_vld_in = axi_input_V_V_TVALID;

assign axi_input_V_V_0_vld_out = axi_input_V_V_0_state[1'd0];

assign axi_input_V_V_TREADY = axi_input_V_V_0_state[1'd1];

assign axi_output_V_V_1_ack_in = axi_output_V_V_1_state[1'd1];

assign axi_output_V_V_1_ack_out = axi_output_V_V_TREADY;

assign axi_output_V_V_1_load_A = (~axi_output_V_V_1_sel_wr & axi_output_V_V_1_state_cmp_full);

assign axi_output_V_V_1_load_B = (axi_output_V_V_1_state_cmp_full & axi_output_V_V_1_sel_wr);

assign axi_output_V_V_1_sel = axi_output_V_V_1_sel_rd;

assign axi_output_V_V_1_state_cmp_full = ((axi_output_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axi_output_V_V_1_vld_out = axi_output_V_V_1_state[1'd0];

assign axi_output_V_V_TDATA = axi_output_V_V_1_data_out;

assign axi_output_V_V_TVALID = axi_output_V_V_1_state[1'd0];

assign c_fu_210_p2 = (select_ln12_reg_224 + 7'd1);

assign icmp_ln12_1_fu_108_p2 = ((ap_phi_mux_r_0_phi_fu_84_p4 < 7'd65) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_186_p2 = ((select_ln12_fu_138_p3 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_3_fu_192_p2 = ((select_ln12_fu_138_p3 < 7'd65) ? 1'b1 : 1'b0);

assign icmp_ln12_4_fu_152_p2 = ((add_ln8_1_fu_146_p2 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_5_fu_158_p2 = ((add_ln8_1_fu_146_p2 < 7'd65) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_102_p2 = ((ap_phi_mux_r_0_phi_fu_84_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_120_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_73_p4 == 13'd4356) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_132_p2 = ((ap_phi_mux_c_0_phi_fu_95_p4 == 7'd66) ? 1'b1 : 1'b0);

assign select_ln12_1_fu_170_p3 = ((icmp_ln9_fu_132_p2[0:0] === 1'b1) ? and_ln12_3_fu_164_p2 : and_ln12_fu_114_p2);

assign select_ln12_fu_138_p3 = ((icmp_ln9_fu_132_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_c_0_phi_fu_95_p4);

assign select_ln8_fu_178_p3 = ((icmp_ln9_fu_132_p2[0:0] === 1'b1) ? add_ln8_1_fu_146_p2 : ap_phi_mux_r_0_phi_fu_84_p4);

endmodule //zero_padding
